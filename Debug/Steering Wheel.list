
Steering Wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005440  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800554c  0800554c  0000654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa0  08005aa0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005aa0  08005aa0  00007068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005aa0  08005aa0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa0  08005aa0  00006aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aa4  08005aa4  00006aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005aa8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08005b10  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08005b10  000072cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc15  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c39  00000000  00000000  00012ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  000148e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b3  00000000  00000000  00015410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e7  00000000  00000000  00015cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3ca  00000000  00000000  0002e0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089110  00000000  00000000  0003b474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  000c45c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000c7de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08005534 	.word	0x08005534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08005534 	.word	0x08005534

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == "\n")
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	461a      	mov	r2, r3
 8000158:	4b0a      	ldr	r3, [pc, #40]	@ (8000184 <__io_putchar+0x38>)
 800015a:	429a      	cmp	r2, r3
 800015c:	d106      	bne.n	800016c <__io_putchar+0x20>
		HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000162:	2201      	movs	r2, #1
 8000164:	4908      	ldr	r1, [pc, #32]	@ (8000188 <__io_putchar+0x3c>)
 8000166:	4809      	ldr	r0, [pc, #36]	@ (800018c <__io_putchar+0x40>)
 8000168:	f003 fe8e 	bl	8003e88 <HAL_UART_Transmit>
	HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800016c:	1d39      	adds	r1, r7, #4
 800016e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000172:	2201      	movs	r2, #1
 8000174:	4805      	ldr	r0, [pc, #20]	@ (800018c <__io_putchar+0x40>)
 8000176:	f003 fe87 	bl	8003e88 <HAL_UART_Transmit>

	return ch;
 800017a:	687b      	ldr	r3, [r7, #4]
}
 800017c:	4618      	mov	r0, r3
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	0800554c 	.word	0x0800554c
 8000188:	08005550 	.word	0x08005550
 800018c:	20000100 	.word	0x20000100

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b09a      	sub	sp, #104	@ 0x68
 8000194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fdb7 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f8d7 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f9cb 	bl	8000538 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f99f 	bl	80004e4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001a6:	f000 f913 	bl	80003d0 <MX_CAN_Init>
  MX_I2C1_Init();
 80001aa:	f000 f96d 	bl	8000488 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* --- AS5600 센서 연결 확인 --- */
  if (HAL_I2C_IsDeviceReady(&hi2c1, (AS5600_SLAVE_ADDR << 1), 2, 100) != HAL_OK)
 80001ae:	2364      	movs	r3, #100	@ 0x64
 80001b0:	2202      	movs	r2, #2
 80001b2:	216c      	movs	r1, #108	@ 0x6c
 80001b4:	4854      	ldr	r0, [pc, #336]	@ (8000308 <main+0x178>)
 80001b6:	f002 fca3 	bl	8002b00 <HAL_I2C_IsDeviceReady>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d005      	beq.n	80001cc <main+0x3c>
    {
      printf("AS5600 not found!\r\n");
 80001c0:	4852      	ldr	r0, [pc, #328]	@ (800030c <main+0x17c>)
 80001c2:	f004 f95f 	bl	8004484 <puts>
      Error_Handler();
 80001c6:	f000 fb87 	bl	80008d8 <Error_Handler>
 80001ca:	e002      	b.n	80001d2 <main+0x42>
    }
    else
    {
      printf("AS5600 found. Starting angle transmission...\r\n");
 80001cc:	4850      	ldr	r0, [pc, #320]	@ (8000310 <main+0x180>)
 80001ce:	f004 f959 	bl	8004484 <puts>
    }

    /* --- CAN 통신 시작 --- */
    if (HAL_CAN_Start(&hcan) != HAL_OK)
 80001d2:	4850      	ldr	r0, [pc, #320]	@ (8000314 <main+0x184>)
 80001d4:	f000 ffe2 	bl	800119c <HAL_CAN_Start>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d004      	beq.n	80001e8 <main+0x58>
    {
      printf("CAN Start Failed!\r\n");
 80001de:	484e      	ldr	r0, [pc, #312]	@ (8000318 <main+0x188>)
 80001e0:	f004 f950 	bl	8004484 <puts>
      Error_Handler();
 80001e4:	f000 fb78 	bl	80008d8 <Error_Handler>
    }
    printf("CAN Started Successfully.\r\n");
 80001e8:	484c      	ldr	r0, [pc, #304]	@ (800031c <main+0x18c>)
 80001ea:	f004 f94b 	bl	8004484 <puts>



    /* --- CAN 전송 헤더 설정 --- */
    TxHeader.StdId = CAN_ANGLE_ID;      // 우리가 정한 CAN ID
 80001ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000320 <main+0x190>)
 80001f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001f4:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId = 0;
 80001f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000320 <main+0x190>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	605a      	str	r2, [r3, #4]
    TxHeader.IDE = CAN_ID_STD;          // Standard ID
 80001fc:	4b48      	ldr	r3, [pc, #288]	@ (8000320 <main+0x190>)
 80001fe:	2200      	movs	r2, #0
 8000200:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;        // Data Frame
 8000202:	4b47      	ldr	r3, [pc, #284]	@ (8000320 <main+0x190>)
 8000204:	2200      	movs	r2, #0
 8000206:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = 2;                   // 데이터 길이: 2바이트 (0~360 각도를 담기에 충분)
 8000208:	4b45      	ldr	r3, [pc, #276]	@ (8000320 <main+0x190>)
 800020a:	2202      	movs	r2, #2
 800020c:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 800020e:	4b44      	ldr	r3, [pc, #272]	@ (8000320 <main+0x190>)
 8000210:	2200      	movs	r2, #0
 8000212:	751a      	strb	r2, [r3, #20]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // --- 1. 버튼 플래그 확인 및 CAN 전송 (ID 0x101) ---
		  if (b1_pressed_flag == 1) {
 8000214:	4b43      	ldr	r3, [pc, #268]	@ (8000324 <main+0x194>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b01      	cmp	r3, #1
 800021c:	d11b      	bne.n	8000256 <main+0xc6>
			  printf("B1 Pin enabled - Sending CAN 0x101\r\n");
 800021e:	4842      	ldr	r0, [pc, #264]	@ (8000328 <main+0x198>)
 8000220:	f004 f930 	bl	8004484 <puts>
			  TxHeader.StdId = 0x101; TxHeader.DLC = 1; TxData[0] = 0x01;
 8000224:	4b3e      	ldr	r3, [pc, #248]	@ (8000320 <main+0x190>)
 8000226:	f240 1201 	movw	r2, #257	@ 0x101
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	4b3c      	ldr	r3, [pc, #240]	@ (8000320 <main+0x190>)
 800022e:	2201      	movs	r2, #1
 8000230:	611a      	str	r2, [r3, #16]
 8000232:	4b3e      	ldr	r3, [pc, #248]	@ (800032c <main+0x19c>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
			  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){ printf("CAN Tx (B1) FAILED!\r\n"); }
 8000238:	4b3d      	ldr	r3, [pc, #244]	@ (8000330 <main+0x1a0>)
 800023a:	4a3c      	ldr	r2, [pc, #240]	@ (800032c <main+0x19c>)
 800023c:	4938      	ldr	r1, [pc, #224]	@ (8000320 <main+0x190>)
 800023e:	4835      	ldr	r0, [pc, #212]	@ (8000314 <main+0x184>)
 8000240:	f000 fff0 	bl	8001224 <HAL_CAN_AddTxMessage>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <main+0xc0>
 800024a:	483a      	ldr	r0, [pc, #232]	@ (8000334 <main+0x1a4>)
 800024c:	f004 f91a 	bl	8004484 <puts>
			  b1_pressed_flag = 0;
 8000250:	4b34      	ldr	r3, [pc, #208]	@ (8000324 <main+0x194>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
		  }
		  if (b2_pressed_flag == 1) {
 8000256:	4b38      	ldr	r3, [pc, #224]	@ (8000338 <main+0x1a8>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b01      	cmp	r3, #1
 800025e:	d11b      	bne.n	8000298 <main+0x108>
			  printf("B2 Pin enabled - Sending CAN 0x101\r\n");
 8000260:	4836      	ldr	r0, [pc, #216]	@ (800033c <main+0x1ac>)
 8000262:	f004 f90f 	bl	8004484 <puts>
			  TxHeader.StdId = 0x101; TxHeader.DLC = 1; TxData[0] = 0x02;
 8000266:	4b2e      	ldr	r3, [pc, #184]	@ (8000320 <main+0x190>)
 8000268:	f240 1201 	movw	r2, #257	@ 0x101
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	4b2c      	ldr	r3, [pc, #176]	@ (8000320 <main+0x190>)
 8000270:	2201      	movs	r2, #1
 8000272:	611a      	str	r2, [r3, #16]
 8000274:	4b2d      	ldr	r3, [pc, #180]	@ (800032c <main+0x19c>)
 8000276:	2202      	movs	r2, #2
 8000278:	701a      	strb	r2, [r3, #0]
			  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK){ printf("CAN Tx (B2) FAILED!\r\n"); }
 800027a:	4b2d      	ldr	r3, [pc, #180]	@ (8000330 <main+0x1a0>)
 800027c:	4a2b      	ldr	r2, [pc, #172]	@ (800032c <main+0x19c>)
 800027e:	4928      	ldr	r1, [pc, #160]	@ (8000320 <main+0x190>)
 8000280:	4824      	ldr	r0, [pc, #144]	@ (8000314 <main+0x184>)
 8000282:	f000 ffcf 	bl	8001224 <HAL_CAN_AddTxMessage>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <main+0x102>
 800028c:	482c      	ldr	r0, [pc, #176]	@ (8000340 <main+0x1b0>)
 800028e:	f004 f8f9 	bl	8004484 <puts>
			  b2_pressed_flag = 0;
 8000292:	4b29      	ldr	r3, [pc, #164]	@ (8000338 <main+0x1a8>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		  }


		  // AS5600에서 12비트 raw angle 값(0~4095) 읽기
	      uint16_t raw_angle = (as5600_read_angle() + 246 + 1036) % 4096;
 8000298:	f000 f9ae 	bl	80005f8 <as5600_read_angle>
 800029c:	4603      	mov	r3, r0
 800029e:	f203 5302 	addw	r3, r3, #1282	@ 0x502
 80002a2:	425a      	negs	r2, r3
 80002a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002a8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80002ac:	bf58      	it	pl
 80002ae:	4253      	negpl	r3, r2
 80002b0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

	      // 16비트 'degrees' 값을 2개의 8비트 바이트로 분리 (Little-Endian 방식)
	      TxData[0] = (uint8_t)(raw_angle & 0xFF);         // 하위 8비트
 80002b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	4b1c      	ldr	r3, [pc, #112]	@ (800032c <main+0x19c>)
 80002bc:	701a      	strb	r2, [r3, #0]
	      TxData[1] = (uint8_t)((raw_angle >> 8) & 0xFF); // 상위 8비트
 80002be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80002c2:	0a1b      	lsrs	r3, r3, #8
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	4b18      	ldr	r3, [pc, #96]	@ (800032c <main+0x19c>)
 80002ca:	705a      	strb	r2, [r3, #1]
	      // CAN 메시지 전송
	      TxHeader.StdId = 0x100; TxHeader.DLC = 2;
 80002cc:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <main+0x190>)
 80002ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <main+0x190>)
 80002d6:	2202      	movs	r2, #2
 80002d8:	611a      	str	r2, [r3, #16]
	      if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) { printf("CAN Tx FAILED!\r\n"); }
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <main+0x1a0>)
 80002dc:	4a13      	ldr	r2, [pc, #76]	@ (800032c <main+0x19c>)
 80002de:	4910      	ldr	r1, [pc, #64]	@ (8000320 <main+0x190>)
 80002e0:	480c      	ldr	r0, [pc, #48]	@ (8000314 <main+0x184>)
 80002e2:	f000 ff9f 	bl	8001224 <HAL_CAN_AddTxMessage>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d002      	beq.n	80002f2 <main+0x162>
 80002ec:	4815      	ldr	r0, [pc, #84]	@ (8000344 <main+0x1b4>)
 80002ee:	f004 f8c9 	bl	8004484 <puts>
	      printf("Transmitting Angle: %u degrees\r\n", raw_angle);
 80002f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80002f6:	4619      	mov	r1, r3
 80002f8:	4813      	ldr	r0, [pc, #76]	@ (8000348 <main+0x1b8>)
 80002fa:	f004 f85b 	bl	80043b4 <iprintf>
	      HAL_Delay(50);
 80002fe:	2032      	movs	r0, #50	@ 0x32
 8000300:	f000 fd64 	bl	8000dcc <HAL_Delay>
  {
 8000304:	e786      	b.n	8000214 <main+0x84>
 8000306:	bf00      	nop
 8000308:	200000ac 	.word	0x200000ac
 800030c:	08005554 	.word	0x08005554
 8000310:	08005568 	.word	0x08005568
 8000314:	20000084 	.word	0x20000084
 8000318:	08005598 	.word	0x08005598
 800031c:	080055ac 	.word	0x080055ac
 8000320:	20000148 	.word	0x20000148
 8000324:	2000016c 	.word	0x2000016c
 8000328:	080055c8 	.word	0x080055c8
 800032c:	20000160 	.word	0x20000160
 8000330:	20000168 	.word	0x20000168
 8000334:	080055ec 	.word	0x080055ec
 8000338:	2000016d 	.word	0x2000016d
 800033c:	08005604 	.word	0x08005604
 8000340:	08005628 	.word	0x08005628
 8000344:	08005640 	.word	0x08005640
 8000348:	08005650 	.word	0x08005650

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b090      	sub	sp, #64	@ 0x40
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0318 	add.w	r3, r7, #24
 8000356:	2228      	movs	r2, #40	@ 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 f9a8 	bl	80046b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800036e:	2302      	movs	r3, #2
 8000370:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000376:	2310      	movs	r3, #16
 8000378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037a:	2302      	movs	r3, #2
 800037c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800037e:	2300      	movs	r3, #0
 8000380:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000382:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	f107 0318 	add.w	r3, r7, #24
 800038c:	4618      	mov	r0, r3
 800038e:	f003 f91b 	bl	80035c8 <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000398:	f000 fa9e 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039c:	230f      	movs	r3, #15
 800039e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	2302      	movs	r3, #2
 80003a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2102      	movs	r1, #2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 fb88 	bl	8003acc <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003c2:	f000 fa89 	bl	80008d8 <Error_Handler>
  }
}
 80003c6:	bf00      	nop
 80003c8:	3740      	adds	r7, #64	@ 0x40
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	@ 0x28
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003d6:	4b29      	ldr	r3, [pc, #164]	@ (800047c <MX_CAN_Init+0xac>)
 80003d8:	4a29      	ldr	r2, [pc, #164]	@ (8000480 <MX_CAN_Init+0xb0>)
 80003da:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80003dc:	4b27      	ldr	r3, [pc, #156]	@ (800047c <MX_CAN_Init+0xac>)
 80003de:	2208      	movs	r2, #8
 80003e0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003e2:	4b26      	ldr	r3, [pc, #152]	@ (800047c <MX_CAN_Init+0xac>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003e8:	4b24      	ldr	r3, [pc, #144]	@ (800047c <MX_CAN_Init+0xac>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 80003ee:	4b23      	ldr	r3, [pc, #140]	@ (800047c <MX_CAN_Init+0xac>)
 80003f0:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 80003f4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80003f6:	4b21      	ldr	r3, [pc, #132]	@ (800047c <MX_CAN_Init+0xac>)
 80003f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80003fc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003fe:	4b1f      	ldr	r3, [pc, #124]	@ (800047c <MX_CAN_Init+0xac>)
 8000400:	2200      	movs	r2, #0
 8000402:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000404:	4b1d      	ldr	r3, [pc, #116]	@ (800047c <MX_CAN_Init+0xac>)
 8000406:	2200      	movs	r2, #0
 8000408:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800040a:	4b1c      	ldr	r3, [pc, #112]	@ (800047c <MX_CAN_Init+0xac>)
 800040c:	2200      	movs	r2, #0
 800040e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000410:	4b1a      	ldr	r3, [pc, #104]	@ (800047c <MX_CAN_Init+0xac>)
 8000412:	2200      	movs	r2, #0
 8000414:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000416:	4b19      	ldr	r3, [pc, #100]	@ (800047c <MX_CAN_Init+0xac>)
 8000418:	2200      	movs	r2, #0
 800041a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800041c:	4b17      	ldr	r3, [pc, #92]	@ (800047c <MX_CAN_Init+0xac>)
 800041e:	2200      	movs	r2, #0
 8000420:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000422:	4816      	ldr	r0, [pc, #88]	@ (800047c <MX_CAN_Init+0xac>)
 8000424:	f000 fcf6 	bl	8000e14 <HAL_CAN_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800042e:	f000 fa53 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterBank = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800043a:	2301      	movs	r3, #1
 800043c:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000442:	2300      	movs	r3, #0
 8000444:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000446:	2300      	movs	r3, #0
 8000448:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0; // FIFO 0에 배정
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000452:	2301      	movs	r3, #1
 8000454:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14; // (기본값)
 8000456:	230e      	movs	r3, #14
 8000458:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800045a:	463b      	mov	r3, r7
 800045c:	4619      	mov	r1, r3
 800045e:	4807      	ldr	r0, [pc, #28]	@ (800047c <MX_CAN_Init+0xac>)
 8000460:	f000 fdd3 	bl	800100a <HAL_CAN_ConfigFilter>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d004      	beq.n	8000474 <MX_CAN_Init+0xa4>
    {
      /* Filter configuration Error */
      printf("!!! HAL_CAN_ConfigFilter FAILED !!!\r\n");
 800046a:	4806      	ldr	r0, [pc, #24]	@ (8000484 <MX_CAN_Init+0xb4>)
 800046c:	f004 f80a 	bl	8004484 <puts>
      Error_Handler();
 8000470:	f000 fa32 	bl	80008d8 <Error_Handler>
    }
  /* USER CODE END CAN_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	3728      	adds	r7, #40	@ 0x28
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000084 	.word	0x20000084
 8000480:	40006400 	.word	0x40006400
 8000484:	08005674 	.word	0x08005674

08000488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <MX_I2C1_Init+0x50>)
 800048e:	4a13      	ldr	r2, [pc, #76]	@ (80004dc <MX_I2C1_Init+0x54>)
 8000490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <MX_I2C1_Init+0x50>)
 8000494:	4a12      	ldr	r2, [pc, #72]	@ (80004e0 <MX_I2C1_Init+0x58>)
 8000496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000498:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <MX_I2C1_Init+0x50>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <MX_I2C1_Init+0x50>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_I2C1_Init+0x50>)
 80004a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <MX_I2C1_Init+0x50>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004b2:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_I2C1_Init+0x50>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b8:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <MX_I2C1_Init+0x50>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004be:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_I2C1_Init+0x50>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004c4:	4804      	ldr	r0, [pc, #16]	@ (80004d8 <MX_I2C1_Init+0x50>)
 80004c6:	f001 fd6b 	bl	8001fa0 <HAL_I2C_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004d0:	f000 fa02 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000ac 	.word	0x200000ac
 80004dc:	40005400 	.word	0x40005400
 80004e0:	00061a80 	.word	0x00061a80

080004e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	@ (8000534 <MX_USART2_UART_Init+0x50>)
 80004ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004ee:	4b10      	ldr	r3, [pc, #64]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 80004f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 800050a:	220c      	movs	r2, #12
 800050c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_USART2_UART_Init+0x4c>)
 800051c:	f003 fc64 	bl	8003de8 <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000526:	f000 f9d7 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000100 	.word	0x20000100
 8000534:	40004400 	.word	0x40004400

08000538 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054c:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <MX_GPIO_Init+0xb4>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a26      	ldr	r2, [pc, #152]	@ (80005ec <MX_GPIO_Init+0xb4>)
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <MX_GPIO_Init+0xb4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0310 	and.w	r3, r3, #16
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <MX_GPIO_Init+0xb4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <MX_GPIO_Init+0xb4>)
 800056a:	f043 0320 	orr.w	r3, r3, #32
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <MX_GPIO_Init+0xb4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0320 	and.w	r3, r3, #32
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b1b      	ldr	r3, [pc, #108]	@ (80005ec <MX_GPIO_Init+0xb4>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a1a      	ldr	r2, [pc, #104]	@ (80005ec <MX_GPIO_Init+0xb4>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <MX_GPIO_Init+0xb4>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000594:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <MX_GPIO_Init+0xb4>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a14      	ldr	r2, [pc, #80]	@ (80005ec <MX_GPIO_Init+0xb4>)
 800059a:	f043 0308 	orr.w	r3, r3, #8
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b12      	ldr	r3, [pc, #72]	@ (80005ec <MX_GPIO_Init+0xb4>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0308 	and.w	r3, r3, #8
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80005ac:	2306      	movs	r3, #6
 80005ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <MX_GPIO_Init+0xb8>)
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <MX_GPIO_Init+0xbc>)
 80005c0:	f001 fb52 	bl	8001c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2007      	movs	r0, #7
 80005ca:	f001 fb16 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005ce:	2007      	movs	r0, #7
 80005d0:	f001 fb2f 	bl	8001c32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2008      	movs	r0, #8
 80005da:	f001 fb0e 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80005de:	2008      	movs	r0, #8
 80005e0:	f001 fb27 	bl	8001c32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000
 80005f0:	10110000 	.word	0x10110000
 80005f4:	40010c00 	.word	0x40010c00

080005f8 <as5600_read_angle>:

/* USER CODE BEGIN 4 */
uint16_t as5600_read_angle(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af04      	add	r7, sp, #16
  uint8_t i2c_buf[2];
  uint16_t angle_val = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	80fb      	strh	r3, [r7, #6]

  if (HAL_I2C_Mem_Read(&hi2c1, (AS5600_SLAVE_ADDR << 1), AS5600_REG_ANGLE, I2C_MEMADD_SIZE_8BIT, i2c_buf, 2, 100) == HAL_OK)
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2302      	movs	r3, #2
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	220e      	movs	r2, #14
 8000612:	216c      	movs	r1, #108	@ 0x6c
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <as5600_read_angle+0x4c>)
 8000616:	f001 ffff 	bl	8002618 <HAL_I2C_Mem_Read>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d109      	bne.n	8000634 <as5600_read_angle+0x3c>
  {
    angle_val = (i2c_buf[0] << 8) | i2c_buf[1];
 8000620:	793b      	ldrb	r3, [r7, #4]
 8000622:	b21b      	sxth	r3, r3
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	b21a      	sxth	r2, r3
 8000628:	797b      	ldrb	r3, [r7, #5]
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21b      	sxth	r3, r3
 8000630:	80fb      	strh	r3, [r7, #6]
 8000632:	e002      	b.n	800063a <as5600_read_angle+0x42>
  }
  else
  {
    printf("I2C Read Error! (AS5600)\r\n"); // 에러 소스 명시
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <as5600_read_angle+0x50>)
 8000636:	f003 ff25 	bl	8004484 <puts>
  }

  return angle_val;
 800063a:	88fb      	ldrh	r3, [r7, #6]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000ac 	.word	0x200000ac
 8000648:	0800569c 	.word	0x0800569c

0800064c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
   uint32_t current_tick = HAL_GetTick(); // 현재 시간
 8000656:	f000 fbaf 	bl	8000db8 <HAL_GetTick>
 800065a:	60f8      	str	r0, [r7, #12]

   switch(GPIO_Pin) {
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d002      	beq.n	8000668 <HAL_GPIO_EXTI_Callback+0x1c>
 8000662:	2b04      	cmp	r3, #4
 8000664:	d00d      	beq.n	8000682 <HAL_GPIO_EXTI_Callback+0x36>
              b2_pressed_flag = 1;  // 플래그 세우기
              last_b2_tick = current_tick; // 마지막 시간 갱신
          }
          break;
       default:
          break;
 8000666:	e01c      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0x56>
          if (current_tick - last_b1_tick > DEBOUNCE_TIME_MS) {
 8000668:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <HAL_GPIO_EXTI_Callback+0x60>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	2b64      	cmp	r3, #100	@ 0x64
 8000672:	d913      	bls.n	800069c <HAL_GPIO_EXTI_Callback+0x50>
              b1_pressed_flag = 1;  // 플래그 세우기
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
              last_b1_tick = current_tick; // 마지막 시간 갱신
 800067a:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <HAL_GPIO_EXTI_Callback+0x60>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6013      	str	r3, [r2, #0]
          break;
 8000680:	e00c      	b.n	800069c <HAL_GPIO_EXTI_Callback+0x50>
          if (current_tick - last_b2_tick > DEBOUNCE_TIME_MS) {
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	2b64      	cmp	r3, #100	@ 0x64
 800068c:	d908      	bls.n	80006a0 <HAL_GPIO_EXTI_Callback+0x54>
              b2_pressed_flag = 1;  // 플래그 세우기
 800068e:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
              last_b2_tick = current_tick; // 마지막 시간 갱신
 8000694:	4a07      	ldr	r2, [pc, #28]	@ (80006b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6013      	str	r3, [r2, #0]
          break;
 800069a:	e001      	b.n	80006a0 <HAL_GPIO_EXTI_Callback+0x54>
          break;
 800069c:	bf00      	nop
 800069e:	e000      	b.n	80006a2 <HAL_GPIO_EXTI_Callback+0x56>
          break;
 80006a0:	bf00      	nop
   }
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000170 	.word	0x20000170
 80006b0:	2000016c 	.word	0x2000016c
 80006b4:	20000174 	.word	0x20000174
 80006b8:	2000016d 	.word	0x2000016d

080006bc <drv2605l_write_reg>:
  * @param reg: 쓸 레지스터 주소
  * @param value: 쓸 값
  * @retval HAL status
  */
HAL_StatusTypeDef drv2605l_write_reg(uint8_t channel, uint8_t reg, uint8_t value)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
 80006c6:	460b      	mov	r3, r1
 80006c8:	71bb      	strb	r3, [r7, #6]
 80006ca:	4613      	mov	r3, r2
 80006cc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status;
  HAL_StatusTypeDef mux_deselect_status; // MUX 비활성화 상태 저장용

  // 1. MUX 채널 선택
  status = select_mux_channel(channel);
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f8df 	bl	8000894 <select_mux_channel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <drv2605l_write_reg+0x2e>
      select_mux_channel(0xFF); // 오류 시에도 비활성화 시도
 80006e0:	20ff      	movs	r0, #255	@ 0xff
 80006e2:	f000 f8d7 	bl	8000894 <select_mux_channel>
      return status;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	e014      	b.n	8000714 <drv2605l_write_reg+0x58>
  }

  // 2. DRV2605L에 쓰기
  status = HAL_I2C_Mem_Write(&hi2c1, (DRV2605L_ADDR << 1), reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80006ea:	79bb      	ldrb	r3, [r7, #6]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	2364      	movs	r3, #100	@ 0x64
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	2301      	movs	r3, #1
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	1d7b      	adds	r3, r7, #5
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	21b4      	movs	r1, #180	@ 0xb4
 80006fe:	4807      	ldr	r0, [pc, #28]	@ (800071c <drv2605l_write_reg+0x60>)
 8000700:	f001 fe90 	bl	8002424 <HAL_I2C_Mem_Write>
 8000704:	4603      	mov	r3, r0
 8000706:	73fb      	strb	r3, [r7, #15]

  // 3. MUX 모든 채널 비활성화
  mux_deselect_status = select_mux_channel(0xFF); // 0xFF 같은 유효하지 않은 채널 번호로 비활성화
 8000708:	20ff      	movs	r0, #255	@ 0xff
 800070a:	f000 f8c3 	bl	8000894 <select_mux_channel>
 800070e:	4603      	mov	r3, r0
 8000710:	73bb      	strb	r3, [r7, #14]

  return status;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000ac 	.word	0x200000ac

08000720 <drv2605l_play_effect>:
  * @param channel: 재생할 모터 드라이버의 MUX 채널 (0-7)
  * @param effect_id: 재생할 효과 ID (1-123)
  * @retval HAL status
  */
HAL_StatusTypeDef drv2605l_play_effect(uint8_t channel, uint8_t effect_id)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint8_t go_status;

  if (effect_id == 0 || effect_id > 123) return HAL_ERROR; // Invalid Effect ID
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <drv2605l_play_effect+0x1c>
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	2b7b      	cmp	r3, #123	@ 0x7b
 800073a:	d901      	bls.n	8000740 <drv2605l_play_effect+0x20>
 800073c:	2301      	movs	r3, #1
 800073e:	e022      	b.n	8000786 <drv2605l_play_effect+0x66>
  // status = drv2605l_read_reg(channel, DRV2605L_REG_GO, &go_status);
  // if (status == HAL_OK && (go_status & 0x01)) return HAL_BUSY; // Busy
  // 참고: 인터럽트에서 호출 시, Busy 체크는 오히려 문제를 일으킬 수 있으므로 생략

  // 1. Write Effect ID to Sequencer 1
  status = drv2605l_write_reg(channel, DRV2605L_REG_WAVEFORM_SEQ_1, effect_id);
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2104      	movs	r1, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ffb8 	bl	80006bc <drv2605l_write_reg>
 800074c:	4603      	mov	r3, r0
 800074e:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) return status;
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <drv2605l_play_effect+0x3a>
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	e015      	b.n	8000786 <drv2605l_play_effect+0x66>

  // 2. Terminate Sequence (Slot 2에 0x00 쓰기)
  status = drv2605l_write_reg(channel, DRV2605L_REG_WAVEFORM_SEQ_2, 0x00);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2200      	movs	r2, #0
 800075e:	2105      	movs	r1, #5
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ffab 	bl	80006bc <drv2605l_write_reg>
 8000766:	4603      	mov	r3, r0
 8000768:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) return status;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <drv2605l_play_effect+0x54>
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	e008      	b.n	8000786 <drv2605l_play_effect+0x66>

  // 3. Trigger GO
  status = drv2605l_write_reg(channel, DRV2605L_REG_GO, 0x01);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2201      	movs	r2, #1
 8000778:	210c      	movs	r1, #12
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff9e 	bl	80006bc <drv2605l_write_reg>
 8000780:	4603      	mov	r3, r0
 8000782:	73fb      	strb	r3, [r7, #15]
  return status;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief  CAN RX FIFO 0에 메시지가 수신되면 호출되는 콜백 함수
  * @brief  [수정됨] 수신된 데이터에 따라 16번 이펙트를 재생합니다.
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000792:	b0af      	sub	sp, #188	@ 0xbc
 8000794:	af08      	add	r7, sp, #32
 8000796:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];
    char uart_buf[100]; // UART 출력용 버퍼

    // 1. RX FIFO 0에서 메시지를 읽어옵니다.
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000798:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800079c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80007a0:	2100      	movs	r1, #0
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f000 fe0d 	bl	80013c2 <HAL_CAN_GetRxMessage>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d167      	bne.n	800087e <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
    }

    // --- 수신된 ID에 따라 다른 동작 수행 ---

    // ID 0x102 = "모터 8개 이펙트 트리거" 명령
    if (RxHeader.StdId == 0x102)
 80007ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007b0:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80007b4:	d14c      	bne.n	8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
    {
        // 8바이트 데이터(DLC=8)가 왔는지 확인
        if (RxHeader.DLC == 8)
 80007b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d160      	bne.n	8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
        {
            snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Effect Trigger]: %u %u %u %u %u %u %u %u\r\n",
                     RxData[0], RxData[1], RxData[2], RxData[3],
 80007be:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
            snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Effect Trigger]: %u %u %u %u %u %u %u %u\r\n",
 80007c2:	469c      	mov	ip, r3
                     RxData[0], RxData[1], RxData[2], RxData[3],
 80007c4:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80007c8:	f897 2072 	ldrb.w	r2, [r7, #114]	@ 0x72
 80007cc:	f897 1073 	ldrb.w	r1, [r7, #115]	@ 0x73
                     RxData[4], RxData[5], RxData[6], RxData[7]);
 80007d0:	f897 0074 	ldrb.w	r0, [r7, #116]	@ 0x74
            snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Effect Trigger]: %u %u %u %u %u %u %u %u\r\n",
 80007d4:	4604      	mov	r4, r0
                     RxData[4], RxData[5], RxData[6], RxData[7]);
 80007d6:	f897 0075 	ldrb.w	r0, [r7, #117]	@ 0x75
            snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Effect Trigger]: %u %u %u %u %u %u %u %u\r\n",
 80007da:	4605      	mov	r5, r0
                     RxData[4], RxData[5], RxData[6], RxData[7]);
 80007dc:	f897 0076 	ldrb.w	r0, [r7, #118]	@ 0x76
            snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Effect Trigger]: %u %u %u %u %u %u %u %u\r\n",
 80007e0:	4606      	mov	r6, r0
                     RxData[4], RxData[5], RxData[6], RxData[7]);
 80007e2:	f897 0077 	ldrb.w	r0, [r7, #119]	@ 0x77
            snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Effect Trigger]: %u %u %u %u %u %u %u %u\r\n",
 80007e6:	6038      	str	r0, [r7, #0]
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	f8d7 e000 	ldr.w	lr, [r7]
 80007f0:	f8cd e018 	str.w	lr, [sp, #24]
 80007f4:	9605      	str	r6, [sp, #20]
 80007f6:	9504      	str	r5, [sp, #16]
 80007f8:	9403      	str	r4, [sp, #12]
 80007fa:	9102      	str	r1, [sp, #8]
 80007fc:	9201      	str	r2, [sp, #4]
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4663      	mov	r3, ip
 8000802:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000804:	2164      	movs	r1, #100	@ 0x64
 8000806:	f003 fe45 	bl	8004494 <sniprintf>
            printf("%s", uart_buf);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	4619      	mov	r1, r3
 8000810:	481e      	ldr	r0, [pc, #120]	@ (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000812:	f003 fdcf 	bl	80043b4 <iprintf>

            // 8개 모터에 대해 이펙트 재생
            for (int i = 0; i < 8; i++)
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800081c:	e013      	b.n	8000846 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
            {
                // RxData[i] 값이 0이 아니면, 해당 채널(i)에 16번 이펙트를 재생합니다.
                if (RxData[i] != 0)
 800081e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000822:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
                {
                    // (이 함수는 내부에 MUX 채널 선택 로직을 포함하고 있습니다)
                    drv2605l_play_effect(i, 16); // 16번 이펙트 재생
 800082e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2110      	movs	r1, #16
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff72 	bl	8000720 <drv2605l_play_effect>
            for (int i = 0; i < 8; i++)
 800083c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000840:	3301      	adds	r3, #1
 8000842:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000846:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800084a:	2b07      	cmp	r3, #7
 800084c:	dde7      	ble.n	800081e <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
 800084e:	e017      	b.n	8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
                }
            }
        }
    }
    // 예: 다른 ID 처리
    else if (RxHeader.StdId == 0x200)
 8000850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000856:	d113      	bne.n	8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
    {
        snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Other]: ID 0x%03X | Data[0]: 0x%02X\r\n",
                 (int)RxHeader.StdId, RxData[0]);
 8000858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
        snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Other]: ID 0x%03X | Data[0]: 0x%02X\r\n",
 800085a:	461a      	mov	r2, r3
                 (int)RxHeader.StdId, RxData[0]);
 800085c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
        snprintf(uart_buf, sizeof(uart_buf), ">>> CAN RX [Other]: ID 0x%03X | Data[0]: 0x%02X\r\n",
 8000860:	f107 000c 	add.w	r0, r7, #12
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	4613      	mov	r3, r2
 8000868:	4a09      	ldr	r2, [pc, #36]	@ (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800086a:	2164      	movs	r1, #100	@ 0x64
 800086c:	f003 fe12 	bl	8004494 <sniprintf>
        printf("%s", uart_buf);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8000878:	f003 fd9c 	bl	80043b4 <iprintf>
 800087c:	e000      	b.n	8000880 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
        return; // 읽기 실패 시 종료
 800087e:	bf00      	nop
    }
}
 8000880:	379c      	adds	r7, #156	@ 0x9c
 8000882:	46bd      	mov	sp, r7
 8000884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000886:	bf00      	nop
 8000888:	080059d0 	.word	0x080059d0
 800088c:	08005a08 	.word	0x08005a08
 8000890:	08005a0c 	.word	0x08005a0c

08000894 <select_mux_channel>:
  * @brief TCA9548A MUX의 특정 채널을 선택하거나 모두 비활성화합니다.
  * @param channel: 선택할 채널 번호 (0-7). 0xFF 또는 다른 값 입력 시 모든 채널 비활성화.
  * @retval HAL status
  */
HAL_StatusTypeDef select_mux_channel(uint8_t channel)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af02      	add	r7, sp, #8
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  uint8_t mux_cmd = 0; // 기본값: 모든 채널 비활성화
 800089e:	2300      	movs	r3, #0
 80008a0:	73bb      	strb	r3, [r7, #14]
  if (channel < 8)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b07      	cmp	r3, #7
 80008a6:	d805      	bhi.n	80008b4 <select_mux_channel+0x20>
  {
    mux_cmd = 1 << channel; // 해당 채널 비트만 1로 설정
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2201      	movs	r2, #1
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	73bb      	strb	r3, [r7, #14]
  }
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (TCA9548A_ADDR << 1), &mux_cmd, 1, 100);
 80008b4:	f107 020e 	add.w	r2, r7, #14
 80008b8:	2364      	movs	r3, #100	@ 0x64
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2301      	movs	r3, #1
 80008be:	21e0      	movs	r1, #224	@ 0xe0
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <select_mux_channel+0x40>)
 80008c2:	f001 fcb1 	bl	8002228 <HAL_I2C_Master_Transmit>
 80008c6:	4603      	mov	r3, r0
 80008c8:	73fb      	strb	r3, [r7, #15]
  return status;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000ac 	.word	0x200000ac

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <HAL_MspInit+0x5c>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a14      	ldr	r2, [pc, #80]	@ (8000940 <HAL_MspInit+0x5c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_MspInit+0x5c>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x5c>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <HAL_MspInit+0x5c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_MspInit+0x5c>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_MspInit+0x60>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <HAL_MspInit+0x60>)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000
 8000944:	40010000 	.word	0x40010000

08000948 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a20      	ldr	r2, [pc, #128]	@ (80009e4 <HAL_CAN_MspInit+0x9c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d139      	bne.n	80009dc <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <HAL_CAN_MspInit+0xa0>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <HAL_CAN_MspInit+0xa0>)
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000972:	61d3      	str	r3, [r2, #28]
 8000974:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <HAL_CAN_MspInit+0xa0>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <HAL_CAN_MspInit+0xa0>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a18      	ldr	r2, [pc, #96]	@ (80009e8 <HAL_CAN_MspInit+0xa0>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <HAL_CAN_MspInit+0xa0>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000998:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800099c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	480f      	ldr	r0, [pc, #60]	@ (80009ec <HAL_CAN_MspInit+0xa4>)
 80009ae:	f001 f95b 	bl	8001c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0310 	add.w	r3, r7, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	4809      	ldr	r0, [pc, #36]	@ (80009ec <HAL_CAN_MspInit+0xa4>)
 80009c8:	f001 f94e 	bl	8001c68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2100      	movs	r1, #0
 80009d0:	2014      	movs	r0, #20
 80009d2:	f001 f912 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80009d6:	2014      	movs	r0, #20
 80009d8:	f001 f92b 	bl	8001c32 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40006400 	.word	0x40006400
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40010800 	.word	0x40010800

080009f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <HAL_I2C_MspInit+0x70>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d123      	bne.n	8000a58 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <HAL_I2C_MspInit+0x74>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a13      	ldr	r2, [pc, #76]	@ (8000a64 <HAL_I2C_MspInit+0x74>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <HAL_I2C_MspInit+0x74>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a28:	23c0      	movs	r3, #192	@ 0xc0
 8000a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2c:	2312      	movs	r3, #18
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480b      	ldr	r0, [pc, #44]	@ (8000a68 <HAL_I2C_MspInit+0x78>)
 8000a3c:	f001 f914 	bl	8001c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <HAL_I2C_MspInit+0x74>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a07      	ldr	r2, [pc, #28]	@ (8000a64 <HAL_I2C_MspInit+0x74>)
 8000a46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a4a:	61d3      	str	r3, [r2, #28]
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_I2C_MspInit+0x74>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40005400 	.word	0x40005400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010c00 	.word	0x40010c00

08000a6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a15      	ldr	r2, [pc, #84]	@ (8000adc <HAL_UART_MspInit+0x70>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d123      	bne.n	8000ad4 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <HAL_UART_MspInit+0x74>)
 8000a8e:	69db      	ldr	r3, [r3, #28]
 8000a90:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <HAL_UART_MspInit+0x74>)
 8000a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a96:	61d3      	str	r3, [r2, #28]
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <HAL_UART_MspInit+0x74>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_UART_MspInit+0x74>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <HAL_UART_MspInit+0x74>)
 8000aaa:	f043 0304 	orr.w	r3, r3, #4
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_UART_MspInit+0x74>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000abc:	230c      	movs	r3, #12
 8000abe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <HAL_UART_MspInit+0x78>)
 8000ad0:	f001 f8ca 	bl	8001c68 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3720      	adds	r7, #32
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f92c 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f001 fa13 	bl	8001f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000b52:	2004      	movs	r0, #4
 8000b54:	f001 fa0c 	bl	8001f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b62:	f000 fd4f 	bl	8001604 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000084 	.word	0x20000084

08000b70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
  }

  return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e009      	b.n	8000bd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fac1 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf1      	blt.n	8000bbc <_write+0x12>
  }
  return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_close>:

int _close(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c08:	605a      	str	r2, [r3, #4]
  return 0;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr

08000c16 <_isatty>:

int _isatty(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
	...

08000c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <_sbrk+0x5c>)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <_sbrk+0x60>)
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d102      	bne.n	8000c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c60:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <_sbrk+0x64>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <_sbrk+0x68>)
 8000c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d207      	bcs.n	8000c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c74:	f003 fd6a 	bl	800474c <__errno>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	e009      	b.n	8000c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <_sbrk+0x64>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a05      	ldr	r2, [pc, #20]	@ (8000ca8 <_sbrk+0x64>)
 8000c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20005000 	.word	0x20005000
 8000ca4:	00000400 	.word	0x00000400
 8000ca8:	20000178 	.word	0x20000178
 8000cac:	200002d0 	.word	0x200002d0

08000cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff fff8 	bl	8000cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cc2:	490c      	ldr	r1, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a09      	ldr	r2, [pc, #36]	@ (8000cfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd8:	4c09      	ldr	r4, [pc, #36]	@ (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 fd37 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cea:	f7ff fa51 	bl	8000190 <main>
  bx lr
 8000cee:	4770      	bx	lr
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cf8:	08005aa8 	.word	0x08005aa8
  ldr r2, =_sbss
 8000cfc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d00:	200002cc 	.word	0x200002cc

08000d04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC1_2_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <HAL_Init+0x28>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a07      	ldr	r2, [pc, #28]	@ (8000d30 <HAL_Init+0x28>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 ff63 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f808 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d24:	f7ff fdde 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40022000 	.word	0x40022000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 ff7b 	bl	8001c4e <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 ff43 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <HAL_IncTick+0x1c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <HAL_IncTick+0x20>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a03      	ldr	r2, [pc, #12]	@ (8000db4 <HAL_IncTick+0x20>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	20000008 	.word	0x20000008
 8000db4:	2000017c 	.word	0x2000017c

08000db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	@ (8000dc8 <HAL_GetTick+0x10>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	2000017c 	.word	0x2000017c

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff fff0 	bl	8000db8 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffe0 	bl	8000db8 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e0ed      	b.n	8001002 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d102      	bne.n	8000e38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fd88 	bl	8000948 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e48:	f7ff ffb6 	bl	8000db8 <HAL_GetTick>
 8000e4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e4e:	e012      	b.n	8000e76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e50:	f7ff ffb2 	bl	8000db8 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b0a      	cmp	r3, #10
 8000e5c:	d90b      	bls.n	8000e76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0c5      	b.n	8001002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d0e5      	beq.n	8000e50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0202 	bic.w	r2, r2, #2
 8000e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e94:	f7ff ff90 	bl	8000db8 <HAL_GetTick>
 8000e98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e9a:	e012      	b.n	8000ec2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e9c:	f7ff ff8c 	bl	8000db8 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b0a      	cmp	r3, #10
 8000ea8:	d90b      	bls.n	8000ec2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2205      	movs	r2, #5
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e09f      	b.n	8001002 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e5      	bne.n	8000e9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7e1b      	ldrb	r3, [r3, #24]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e007      	b.n	8000efa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7e5b      	ldrb	r3, [r3, #25]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e007      	b.n	8000f24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7e9b      	ldrb	r3, [r3, #26]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d108      	bne.n	8000f3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 0220 	orr.w	r2, r2, #32
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	e007      	b.n	8000f4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0220 	bic.w	r2, r2, #32
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7edb      	ldrb	r3, [r3, #27]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d108      	bne.n	8000f68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0210 	bic.w	r2, r2, #16
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e007      	b.n	8000f78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0210 	orr.w	r2, r2, #16
 8000f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7f1b      	ldrb	r3, [r3, #28]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d108      	bne.n	8000f92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0208 	orr.w	r2, r2, #8
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	e007      	b.n	8000fa2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7f5b      	ldrb	r3, [r3, #29]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d108      	bne.n	8000fbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f042 0204 	orr.w	r2, r2, #4
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e007      	b.n	8000fcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0204 	bic.w	r2, r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	ea42 0103 	orr.w	r1, r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800100a:	b480      	push	{r7}
 800100c:	b087      	sub	sp, #28
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001020:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001022:	7cfb      	ldrb	r3, [r7, #19]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d003      	beq.n	8001030 <HAL_CAN_ConfigFilter+0x26>
 8001028:	7cfb      	ldrb	r3, [r7, #19]
 800102a:	2b02      	cmp	r3, #2
 800102c:	f040 80aa 	bne.w	8001184 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	2201      	movs	r2, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43db      	mvns	r3, r3
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d123      	bne.n	80010b2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	401a      	ands	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800108c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3248      	adds	r2, #72	@ 0x48
 8001092:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010a8:	6979      	ldr	r1, [r7, #20]
 80010aa:	3348      	adds	r3, #72	@ 0x48
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d122      	bne.n	8001100 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3248      	adds	r2, #72	@ 0x48
 80010e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010f6:	6979      	ldr	r1, [r7, #20]
 80010f8:	3348      	adds	r3, #72	@ 0x48
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800111a:	e007      	b.n	800112c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	43db      	mvns	r3, r3
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001146:	e007      	b.n	8001158 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	431a      	orrs	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d107      	bne.n	8001170 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	431a      	orrs	r2, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001176:	f023 0201 	bic.w	r2, r3, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	e006      	b.n	8001192 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001188:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
  }
}
 8001192:	4618      	mov	r0, r3
 8001194:	371c      	adds	r7, #28
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d12e      	bne.n	800120e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2202      	movs	r2, #2
 80011b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fdf6 	bl	8000db8 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ce:	e012      	b.n	80011f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d0:	f7ff fdf2 	bl	8000db8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d90b      	bls.n	80011f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2205      	movs	r2, #5
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e012      	b.n	800121c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e5      	bne.n	80011d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e006      	b.n	800121c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001212:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
  }
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	@ 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001238:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d003      	beq.n	8001250 <HAL_CAN_AddTxMessage+0x2c>
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	2b02      	cmp	r3, #2
 800124c:	f040 80ad 	bne.w	80013aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10a      	bne.n	8001270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001260:	2b00      	cmp	r3, #0
 8001262:	d105      	bne.n	8001270 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8095 	beq.w	800139a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	0e1b      	lsrs	r3, r3, #24
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800127a:	2201      	movs	r2, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10d      	bne.n	80012a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001296:	68f9      	ldr	r1, [r7, #12]
 8001298:	6809      	ldr	r1, [r1, #0]
 800129a:	431a      	orrs	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3318      	adds	r3, #24
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	440b      	add	r3, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e00f      	b.n	80012c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3318      	adds	r3, #24
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	440b      	add	r3, r1
 80012c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6819      	ldr	r1, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3318      	adds	r3, #24
 80012d4:	011b      	lsls	r3, r3, #4
 80012d6:	440b      	add	r3, r1
 80012d8:	3304      	adds	r3, #4
 80012da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	7d1b      	ldrb	r3, [r3, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d111      	bne.n	8001308 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3318      	adds	r3, #24
 80012ec:	011b      	lsls	r3, r3, #4
 80012ee:	4413      	add	r3, r2
 80012f0:	3304      	adds	r3, #4
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	6811      	ldr	r1, [r2, #0]
 80012f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3318      	adds	r3, #24
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	440b      	add	r3, r1
 8001304:	3304      	adds	r3, #4
 8001306:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3307      	adds	r3, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	061a      	lsls	r2, r3, #24
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3306      	adds	r3, #6
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3305      	adds	r3, #5
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4313      	orrs	r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	3204      	adds	r2, #4
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	4610      	mov	r0, r2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	6811      	ldr	r1, [r2, #0]
 8001330:	ea43 0200 	orr.w	r2, r3, r0
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	440b      	add	r3, r1
 800133a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800133e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3303      	adds	r3, #3
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	061a      	lsls	r2, r3, #24
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3302      	adds	r3, #2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3301      	adds	r3, #1
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	4313      	orrs	r3, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	7812      	ldrb	r2, [r2, #0]
 8001360:	4610      	mov	r0, r2
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	6811      	ldr	r1, [r2, #0]
 8001366:	ea43 0200 	orr.w	r2, r3, r0
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	440b      	add	r3, r1
 8001370:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001374:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3318      	adds	r3, #24
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	6811      	ldr	r1, [r2, #0]
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3318      	adds	r3, #24
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	440b      	add	r3, r1
 8001394:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e00e      	b.n	80013b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e006      	b.n	80013b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
  }
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3724      	adds	r7, #36	@ 0x24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013c2:	b480      	push	{r7}
 80013c4:	b087      	sub	sp, #28
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d003      	beq.n	80013e6 <HAL_CAN_GetRxMessage+0x24>
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	f040 8103 	bne.w	80015ec <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10e      	bne.n	800140a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d116      	bne.n	8001428 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e0f7      	b.n	80015fa <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d107      	bne.n	8001428 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0e8      	b.n	80015fa <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	331b      	adds	r3, #27
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0204 	and.w	r2, r3, #4
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	331b      	adds	r3, #27
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	4413      	add	r3, r2
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0d5b      	lsrs	r3, r3, #21
 8001456:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e00b      	b.n	8001478 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	331b      	adds	r3, #27
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4413      	add	r3, r2
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	331b      	adds	r3, #27
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0202 	and.w	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	331b      	adds	r3, #27
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	3304      	adds	r3, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2208      	movs	r2, #8
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	e00b      	b.n	80014c6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	331b      	adds	r3, #27
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4413      	add	r3, r2
 80014ba:	3304      	adds	r3, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 020f 	and.w	r2, r3, #15
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	331b      	adds	r3, #27
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	3304      	adds	r3, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	331b      	adds	r3, #27
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	3304      	adds	r3, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	4413      	add	r3, r2
 8001516:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0a1a      	lsrs	r2, r3, #8
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0c1a      	lsrs	r2, r3, #16
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3302      	adds	r3, #2
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0e1a      	lsrs	r2, r3, #24
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	3303      	adds	r3, #3
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4413      	add	r3, r2
 8001564:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3304      	adds	r3, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	011b      	lsls	r3, r3, #4
 800157a:	4413      	add	r3, r2
 800157c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0a1a      	lsrs	r2, r3, #8
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	3305      	adds	r3, #5
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0c1a      	lsrs	r2, r3, #16
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	3306      	adds	r3, #6
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0e1a      	lsrs	r2, r3, #24
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3307      	adds	r3, #7
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d108      	bne.n	80015d8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0220 	orr.w	r2, r2, #32
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	e007      	b.n	80015e8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691a      	ldr	r2, [r3, #16]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0220 	orr.w	r2, r2, #32
 80015e6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e006      	b.n	80015fa <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
  }
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	371c      	adds	r7, #28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d07c      	beq.n	8001744 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d023      	beq.n	800169c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f983 	bl	8001972 <HAL_CAN_TxMailbox0CompleteCallback>
 800166c:	e016      	b.n	800169c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800167e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001680:	e00c      	b.n	800169c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
 8001694:	e002      	b.n	800169c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f986 	bl	80019a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d024      	beq.n	80016f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f962 	bl	8001984 <HAL_CAN_TxMailbox1CompleteCallback>
 80016c0:	e016      	b.n	80016f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d4:	e00c      	b.n	80016f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e8:	e002      	b.n	80016f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f965 	bl	80019ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d024      	beq.n	8001744 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001702:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f941 	bl	8001996 <HAL_CAN_TxMailbox2CompleteCallback>
 8001714:	e016      	b.n	8001744 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
 8001728:	e00c      	b.n	8001744 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24
 800173c:	e002      	b.n	8001744 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f944 	bl	80019cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00c      	beq.n	8001768 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2210      	movs	r2, #16
 8001766:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2208      	movs	r2, #8
 8001782:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f92a 	bl	80019de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d009      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe fff4 	bl	8000790 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00c      	beq.n	80017cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2210      	movs	r2, #16
 80017ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d006      	beq.n	80017ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2208      	movs	r2, #8
 80017e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f90a 	bl	8001a02 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f8f2 	bl	80019f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00b      	beq.n	800182e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2210      	movs	r2, #16
 8001826:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f8f3 	bl	8001a14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2208      	movs	r2, #8
 8001848:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8eb 	bl	8001a26 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d07b      	beq.n	8001952 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d072      	beq.n	800194a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018b8:	6a3b      	ldr	r3, [r7, #32]
 80018ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d043      	beq.n	800194a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d03e      	beq.n	800194a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018d2:	2b60      	cmp	r3, #96	@ 0x60
 80018d4:	d02b      	beq.n	800192e <HAL_CAN_IRQHandler+0x32a>
 80018d6:	2b60      	cmp	r3, #96	@ 0x60
 80018d8:	d82e      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018da:	2b50      	cmp	r3, #80	@ 0x50
 80018dc:	d022      	beq.n	8001924 <HAL_CAN_IRQHandler+0x320>
 80018de:	2b50      	cmp	r3, #80	@ 0x50
 80018e0:	d82a      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018e2:	2b40      	cmp	r3, #64	@ 0x40
 80018e4:	d019      	beq.n	800191a <HAL_CAN_IRQHandler+0x316>
 80018e6:	2b40      	cmp	r3, #64	@ 0x40
 80018e8:	d826      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018ea:	2b30      	cmp	r3, #48	@ 0x30
 80018ec:	d010      	beq.n	8001910 <HAL_CAN_IRQHandler+0x30c>
 80018ee:	2b30      	cmp	r3, #48	@ 0x30
 80018f0:	d822      	bhi.n	8001938 <HAL_CAN_IRQHandler+0x334>
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d002      	beq.n	80018fc <HAL_CAN_IRQHandler+0x2f8>
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d005      	beq.n	8001906 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80018fa:	e01d      	b.n	8001938 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001904:	e019      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	f043 0310 	orr.w	r3, r3, #16
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800190e:	e014      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	f043 0320 	orr.w	r3, r3, #32
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001918:	e00f      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001922:	e00a      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800192c:	e005      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001934:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001936:	e000      	b.n	800193a <HAL_CAN_IRQHandler+0x336>
            break;
 8001938:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001948:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2204      	movs	r2, #4
 8001950:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f867 	bl	8001a38 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	@ 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4906      	ldr	r1, [pc, #24]	@ (8001ae4 <__NVIC_EnableIRQ+0x34>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	@ (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	@ (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff90 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff2d 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff42 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff90 	bl	8001b3c <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5f 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff35 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b08b      	sub	sp, #44	@ 0x2c
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	e169      	b.n	8001f50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	f040 8158 	bne.w	8001f4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a9a      	ldr	r2, [pc, #616]	@ (8001f08 <HAL_GPIO_Init+0x2a0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d05e      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001ca4:	4a98      	ldr	r2, [pc, #608]	@ (8001f08 <HAL_GPIO_Init+0x2a0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d875      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001caa:	4a98      	ldr	r2, [pc, #608]	@ (8001f0c <HAL_GPIO_Init+0x2a4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d058      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cb0:	4a96      	ldr	r2, [pc, #600]	@ (8001f0c <HAL_GPIO_Init+0x2a4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d86f      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cb6:	4a96      	ldr	r2, [pc, #600]	@ (8001f10 <HAL_GPIO_Init+0x2a8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d052      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cbc:	4a94      	ldr	r2, [pc, #592]	@ (8001f10 <HAL_GPIO_Init+0x2a8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d869      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cc2:	4a94      	ldr	r2, [pc, #592]	@ (8001f14 <HAL_GPIO_Init+0x2ac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d04c      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cc8:	4a92      	ldr	r2, [pc, #584]	@ (8001f14 <HAL_GPIO_Init+0x2ac>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d863      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cce:	4a92      	ldr	r2, [pc, #584]	@ (8001f18 <HAL_GPIO_Init+0x2b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d046      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
 8001cd4:	4a90      	ldr	r2, [pc, #576]	@ (8001f18 <HAL_GPIO_Init+0x2b0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d85d      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001cda:	2b12      	cmp	r3, #18
 8001cdc:	d82a      	bhi.n	8001d34 <HAL_GPIO_Init+0xcc>
 8001cde:	2b12      	cmp	r3, #18
 8001ce0:	d859      	bhi.n	8001d96 <HAL_GPIO_Init+0x12e>
 8001ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce8 <HAL_GPIO_Init+0x80>)
 8001ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce8:	08001d63 	.word	0x08001d63
 8001cec:	08001d3d 	.word	0x08001d3d
 8001cf0:	08001d4f 	.word	0x08001d4f
 8001cf4:	08001d91 	.word	0x08001d91
 8001cf8:	08001d97 	.word	0x08001d97
 8001cfc:	08001d97 	.word	0x08001d97
 8001d00:	08001d97 	.word	0x08001d97
 8001d04:	08001d97 	.word	0x08001d97
 8001d08:	08001d97 	.word	0x08001d97
 8001d0c:	08001d97 	.word	0x08001d97
 8001d10:	08001d97 	.word	0x08001d97
 8001d14:	08001d97 	.word	0x08001d97
 8001d18:	08001d97 	.word	0x08001d97
 8001d1c:	08001d97 	.word	0x08001d97
 8001d20:	08001d97 	.word	0x08001d97
 8001d24:	08001d97 	.word	0x08001d97
 8001d28:	08001d97 	.word	0x08001d97
 8001d2c:	08001d45 	.word	0x08001d45
 8001d30:	08001d59 	.word	0x08001d59
 8001d34:	4a79      	ldr	r2, [pc, #484]	@ (8001f1c <HAL_GPIO_Init+0x2b4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d013      	beq.n	8001d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d3a:	e02c      	b.n	8001d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e029      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e024      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	3308      	adds	r3, #8
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e01f      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	623b      	str	r3, [r7, #32]
          break;
 8001d60:	e01a      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e013      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	611a      	str	r2, [r3, #16]
          break;
 8001d82:	e009      	b.n	8001d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d84:	2308      	movs	r3, #8
 8001d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	615a      	str	r2, [r3, #20]
          break;
 8001d8e:	e003      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x130>
          break;
 8001d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d801      	bhi.n	8001da2 <HAL_GPIO_Init+0x13a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_Init+0x13e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2bff      	cmp	r3, #255	@ 0xff
 8001dac:	d802      	bhi.n	8001db4 <HAL_GPIO_Init+0x14c>
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	e002      	b.n	8001dba <HAL_GPIO_Init+0x152>
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	3b08      	subs	r3, #8
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	210f      	movs	r1, #15
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	401a      	ands	r2, r3
 8001dcc:	6a39      	ldr	r1, [r7, #32]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b1 	beq.w	8001f4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001de8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a4c      	ldr	r2, [pc, #304]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b4a      	ldr	r3, [pc, #296]	@ (8001f20 <HAL_GPIO_Init+0x2b8>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e00:	4a48      	ldr	r2, [pc, #288]	@ (8001f24 <HAL_GPIO_Init+0x2bc>)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a40      	ldr	r2, [pc, #256]	@ (8001f28 <HAL_GPIO_Init+0x2c0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_GPIO_Init+0x1ec>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f2c <HAL_GPIO_Init+0x2c4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1e8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3e      	ldr	r2, [pc, #248]	@ (8001f30 <HAL_GPIO_Init+0x2c8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1e4>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001f34 <HAL_GPIO_Init+0x2cc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1e0>
 8001e44:	2303      	movs	r3, #3
 8001e46:	e006      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e004      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e002      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_GPIO_Init+0x1ee>
 8001e54:	2300      	movs	r3, #0
 8001e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e58:	f002 0203 	and.w	r2, r2, #3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4093      	lsls	r3, r2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e66:	492f      	ldr	r1, [pc, #188]	@ (8001f24 <HAL_GPIO_Init+0x2bc>)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	089b      	lsrs	r3, r3, #2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e80:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	492c      	ldr	r1, [pc, #176]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4928      	ldr	r1, [pc, #160]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ea8:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4922      	ldr	r1, [pc, #136]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60cb      	str	r3, [r1, #12]
 8001eb4:	e006      	b.n	8001ec4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb6:	4b20      	ldr	r3, [pc, #128]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	491e      	ldr	r1, [pc, #120]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed0:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	4918      	ldr	r1, [pc, #96]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	4914      	ldr	r1, [pc, #80]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d021      	beq.n	8001f3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	490e      	ldr	r1, [pc, #56]	@ (8001f38 <HAL_GPIO_Init+0x2d0>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
 8001f04:	e021      	b.n	8001f4a <HAL_GPIO_Init+0x2e2>
 8001f06:	bf00      	nop
 8001f08:	10320000 	.word	0x10320000
 8001f0c:	10310000 	.word	0x10310000
 8001f10:	10220000 	.word	0x10220000
 8001f14:	10210000 	.word	0x10210000
 8001f18:	10120000 	.word	0x10120000
 8001f1c:	10110000 	.word	0x10110000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	40010c00 	.word	0x40010c00
 8001f30:	40011000 	.word	0x40011000
 8001f34:	40011400 	.word	0x40011400
 8001f38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	4909      	ldr	r1, [pc, #36]	@ (8001f6c <HAL_GPIO_Init+0x304>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f47f ae8e 	bne.w	8001c7c <HAL_GPIO_Init+0x14>
  }
}
 8001f60:	bf00      	nop
 8001f62:	bf00      	nop
 8001f64:	372c      	adds	r7, #44	@ 0x2c
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f86:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fb5c 	bl	800064c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e12b      	b.n	800220a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fd12 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2224      	movs	r2, #36	@ 0x24
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ff2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002002:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002004:	f001 feaa 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 8002008:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a81      	ldr	r2, [pc, #516]	@ (8002214 <HAL_I2C_Init+0x274>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d807      	bhi.n	8002024 <HAL_I2C_Init+0x84>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a80      	ldr	r2, [pc, #512]	@ (8002218 <HAL_I2C_Init+0x278>)
 8002018:	4293      	cmp	r3, r2
 800201a:	bf94      	ite	ls
 800201c:	2301      	movls	r3, #1
 800201e:	2300      	movhi	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e006      	b.n	8002032 <HAL_I2C_Init+0x92>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a7d      	ldr	r2, [pc, #500]	@ (800221c <HAL_I2C_Init+0x27c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	bf94      	ite	ls
 800202c:	2301      	movls	r3, #1
 800202e:	2300      	movhi	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0e7      	b.n	800220a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a78      	ldr	r2, [pc, #480]	@ (8002220 <HAL_I2C_Init+0x280>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	430a      	orrs	r2, r1
 8002058:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a6a      	ldr	r2, [pc, #424]	@ (8002214 <HAL_I2C_Init+0x274>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d802      	bhi.n	8002074 <HAL_I2C_Init+0xd4>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3301      	adds	r3, #1
 8002072:	e009      	b.n	8002088 <HAL_I2C_Init+0xe8>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	4a69      	ldr	r2, [pc, #420]	@ (8002224 <HAL_I2C_Init+0x284>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	3301      	adds	r3, #1
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800209a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	495c      	ldr	r1, [pc, #368]	@ (8002214 <HAL_I2C_Init+0x274>)
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d819      	bhi.n	80020dc <HAL_I2C_Init+0x13c>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e59      	subs	r1, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020bc:	400b      	ands	r3, r1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_I2C_Init+0x138>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e59      	subs	r1, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d6:	e051      	b.n	800217c <HAL_I2C_Init+0x1dc>
 80020d8:	2304      	movs	r3, #4
 80020da:	e04f      	b.n	800217c <HAL_I2C_Init+0x1dc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <HAL_I2C_Init+0x168>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e012      	b.n	800212e <HAL_I2C_Init+0x18e>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e58      	subs	r0, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	0099      	lsls	r1, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	fbb0 f3f3 	udiv	r3, r0, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Init+0x196>
 8002132:	2301      	movs	r3, #1
 8002134:	e022      	b.n	800217c <HAL_I2C_Init+0x1dc>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10e      	bne.n	800215c <HAL_I2C_Init+0x1bc>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1e58      	subs	r0, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	440b      	add	r3, r1
 800214c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002150:	3301      	adds	r3, #1
 8002152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800215a:	e00f      	b.n	800217c <HAL_I2C_Init+0x1dc>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	0099      	lsls	r1, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6809      	ldr	r1, [r1, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6911      	ldr	r1, [r2, #16]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68d2      	ldr	r2, [r2, #12]
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	000186a0 	.word	0x000186a0
 8002218:	001e847f 	.word	0x001e847f
 800221c:	003d08ff 	.word	0x003d08ff
 8002220:	431bde83 	.word	0x431bde83
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
 8002238:	4613      	mov	r3, r2
 800223a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7fe fdbc 	bl	8000db8 <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	f040 80e0 	bne.w	8002410 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2319      	movs	r3, #25
 8002256:	2201      	movs	r2, #1
 8002258:	4970      	ldr	r1, [pc, #448]	@ (800241c <HAL_I2C_Master_Transmit+0x1f4>)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 ff7e 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
 8002268:	e0d3      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x50>
 8002274:	2302      	movs	r3, #2
 8002276:	e0cc      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d007      	beq.n	800229e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2221      	movs	r2, #33	@ 0x21
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2210      	movs	r2, #16
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	893a      	ldrh	r2, [r7, #8]
 80022ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a50      	ldr	r2, [pc, #320]	@ (8002420 <HAL_I2C_Master_Transmit+0x1f8>)
 80022de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fd38 	bl	8002d5c <I2C_MasterRequestWrite>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e08d      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800230c:	e066      	b.n	80023dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f001 f83c 	bl	8003390 <I2C_WaitOnTXEFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	2b04      	cmp	r3, #4
 8002324:	d107      	bne.n	8002336 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002334:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06b      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11b      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x188>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d017      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	6a39      	ldr	r1, [r7, #32]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f001 f833 	bl	8003420 <I2C_WaitOnBTFFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e01a      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d194      	bne.n	800230e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	00100002 	.word	0x00100002
 8002420:	ffff0000 	.word	0xffff0000

08002424 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	4608      	mov	r0, r1
 800242e:	4611      	mov	r1, r2
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	817b      	strh	r3, [r7, #10]
 8002436:	460b      	mov	r3, r1
 8002438:	813b      	strh	r3, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800243e:	f7fe fcbb 	bl	8000db8 <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b20      	cmp	r3, #32
 800244e:	f040 80d9 	bne.w	8002604 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2319      	movs	r3, #25
 8002458:	2201      	movs	r2, #1
 800245a:	496d      	ldr	r1, [pc, #436]	@ (8002610 <HAL_I2C_Mem_Write+0x1ec>)
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 fe7d 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
 800246a:	e0cc      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_I2C_Mem_Write+0x56>
 8002476:	2302      	movs	r3, #2
 8002478:	e0c5      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d007      	beq.n	80024a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2221      	movs	r2, #33	@ 0x21
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2240      	movs	r2, #64	@ 0x40
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a3a      	ldr	r2, [r7, #32]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a4d      	ldr	r2, [pc, #308]	@ (8002614 <HAL_I2C_Mem_Write+0x1f0>)
 80024e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024e2:	88f8      	ldrh	r0, [r7, #6]
 80024e4:	893a      	ldrh	r2, [r7, #8]
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	4603      	mov	r3, r0
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fcb4 	bl	8002e60 <I2C_RequestMemoryWrite>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d052      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e081      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 ff42 	bl	8003390 <I2C_WaitOnTXEFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	2b04      	cmp	r3, #4
 8002518:	d107      	bne.n	800252a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06b      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11b      	bne.n	80025a4 <HAL_I2C_Mem_Write+0x180>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d017      	beq.n	80025a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1aa      	bne.n	8002502 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 ff35 	bl	8003420 <I2C_WaitOnBTFFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d107      	bne.n	80025d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e016      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	00100002 	.word	0x00100002
 8002614:	ffff0000 	.word	0xffff0000

08002618 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	@ 0x30
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	817b      	strh	r3, [r7, #10]
 800262a:	460b      	mov	r3, r1
 800262c:	813b      	strh	r3, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002636:	f7fe fbbf 	bl	8000db8 <HAL_GetTick>
 800263a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b20      	cmp	r3, #32
 8002646:	f040 8250 	bne.w	8002aea <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2319      	movs	r3, #25
 8002650:	2201      	movs	r2, #1
 8002652:	4982      	ldr	r1, [pc, #520]	@ (800285c <HAL_I2C_Mem_Read+0x244>)
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fd81 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002660:	2302      	movs	r3, #2
 8002662:	e243      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_I2C_Mem_Read+0x5a>
 800266e:	2302      	movs	r3, #2
 8002670:	e23c      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d007      	beq.n	8002698 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2222      	movs	r2, #34	@ 0x22
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2240      	movs	r2, #64	@ 0x40
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a62      	ldr	r2, [pc, #392]	@ (8002860 <HAL_I2C_Mem_Read+0x248>)
 80026d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026da:	88f8      	ldrh	r0, [r7, #6]
 80026dc:	893a      	ldrh	r2, [r7, #8]
 80026de:	8979      	ldrh	r1, [r7, #10]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4603      	mov	r3, r0
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fc4e 	bl	8002f8c <I2C_RequestMemoryRead>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e1f8      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d113      	bne.n	800272a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e1cc      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272e:	2b01      	cmp	r3, #1
 8002730:	d11e      	bne.n	8002770 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002742:	b672      	cpsid	i
}
 8002744:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800276c:	b662      	cpsie	i
}
 800276e:	e035      	b.n	80027dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b02      	cmp	r3, #2
 8002776:	d11e      	bne.n	80027b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002786:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002788:	b672      	cpsid	i
}
 800278a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027b2:	b662      	cpsie	i
}
 80027b4:	e012      	b.n	80027dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027dc:	e172      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	f200 811f 	bhi.w	8002a26 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d123      	bne.n	8002838 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fe5b 	bl	80034b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e173      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002836:	e145      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	2b02      	cmp	r3, #2
 800283e:	d152      	bne.n	80028e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002846:	2200      	movs	r2, #0
 8002848:	4906      	ldr	r1, [pc, #24]	@ (8002864 <HAL_I2C_Mem_Read+0x24c>)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fc86 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e148      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000
 8002864:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028ae:	b662      	cpsie	i
}
 80028b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028e4:	e0ee      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	2200      	movs	r2, #0
 80028ee:	4981      	ldr	r1, [pc, #516]	@ (8002af4 <HAL_I2C_Mem_Read+0x4dc>)
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fc33 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0f5      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002946:	4b6c      	ldr	r3, [pc, #432]	@ (8002af8 <HAL_I2C_Mem_Read+0x4e0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	4a6b      	ldr	r2, [pc, #428]	@ (8002afc <HAL_I2C_Mem_Read+0x4e4>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a1a      	lsrs	r2, r3, #8
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00da      	lsls	r2, r3, #3
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	3b01      	subs	r3, #1
 8002964:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d118      	bne.n	800299e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f043 0220 	orr.w	r2, r3, #32
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800298e:	b662      	cpsie	i
}
 8002990:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0a6      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d1d9      	bne.n	8002960 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029ee:	b662      	cpsie	i
}
 80029f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a24:	e04e      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fd40 	bl	80034b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e058      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d124      	bne.n	8002ac4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d107      	bne.n	8002a92 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a90:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f ae88 	bne.w	80027de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e000      	b.n	8002aec <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3728      	adds	r7, #40	@ 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	00010004 	.word	0x00010004
 8002af8:	20000000 	.word	0x20000000
 8002afc:	14f8b589 	.word	0x14f8b589

08002b00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	@ 0x28
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7fe f952 	bl	8000db8 <HAL_GetTick>
 8002b14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	f040 8111 	bne.w	8002d4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2319      	movs	r3, #25
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4988      	ldr	r1, [pc, #544]	@ (8002d54 <HAL_I2C_IsDeviceReady+0x254>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fb12 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e104      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_I2C_IsDeviceReady+0x50>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0fd      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d007      	beq.n	8002b76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0201 	orr.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2224      	movs	r2, #36	@ 0x24
 8002b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a70      	ldr	r2, [pc, #448]	@ (8002d58 <HAL_I2C_IsDeviceReady+0x258>)
 8002b98:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ba8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fad0 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd0:	d103      	bne.n	8002bda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b6      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bee:	f7fe f8e3 	bl	8000db8 <HAL_GetTick>
 8002bf2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c22:	e025      	b.n	8002c70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fe f8c8 	bl	8000db8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <HAL_I2C_IsDeviceReady+0x13a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	22a0      	movs	r2, #160	@ 0xa0
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c7a:	d005      	beq.n	8002c88 <HAL_I2C_IsDeviceReady+0x188>
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <HAL_I2C_IsDeviceReady+0x188>
 8002c82:	7dbb      	ldrb	r3, [r7, #22]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0cd      	beq.n	8002c24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d129      	bne.n	8002cf2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	2319      	movs	r3, #25
 8002cca:	2201      	movs	r2, #1
 8002ccc:	4921      	ldr	r1, [pc, #132]	@ (8002d54 <HAL_I2C_IsDeviceReady+0x254>)
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fa44 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e036      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e02c      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2319      	movs	r3, #25
 8002d12:	2201      	movs	r2, #1
 8002d14:	490f      	ldr	r1, [pc, #60]	@ (8002d54 <HAL_I2C_IsDeviceReady+0x254>)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fa20 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e012      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f4ff af32 	bcc.w	8002b9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	00100002 	.word	0x00100002
 8002d58:	ffff0000 	.word	0xffff0000

08002d5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d006      	beq.n	8002d86 <I2C_MasterRequestWrite+0x2a>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d003      	beq.n	8002d86 <I2C_MasterRequestWrite+0x2a>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d84:	d108      	bne.n	8002d98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e00b      	b.n	8002db0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9c:	2b12      	cmp	r3, #18
 8002d9e:	d107      	bne.n	8002db0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f9cd 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd6:	d103      	bne.n	8002de0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e035      	b.n	8002e50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e01b      	b.n	8002e38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e00:	897b      	ldrh	r3, [r7, #10]
 8002e02:	11db      	asrs	r3, r3, #7
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 0306 	and.w	r3, r3, #6
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f063 030f 	orn	r3, r3, #15
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	490e      	ldr	r1, [pc, #56]	@ (8002e58 <I2C_MasterRequestWrite+0xfc>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fa16 	bl	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e010      	b.n	8002e50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4907      	ldr	r1, [pc, #28]	@ (8002e5c <I2C_MasterRequestWrite+0x100>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fa06 	bl	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	00010008 	.word	0x00010008
 8002e5c:	00010002 	.word	0x00010002

08002e60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f960 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00d      	beq.n	8002ebe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb0:	d103      	bne.n	8002eba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e05f      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ebe:	897b      	ldrh	r3, [r7, #10]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ecc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	492d      	ldr	r1, [pc, #180]	@ (8002f88 <I2C_RequestMemoryWrite+0x128>)
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f9bb 	bl	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e04c      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efc:	6a39      	ldr	r1, [r7, #32]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fa46 	bl	8003390 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d107      	bne.n	8002f22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e02b      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d105      	bne.n	8002f38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f2c:	893b      	ldrh	r3, [r7, #8]
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]
 8002f36:	e021      	b.n	8002f7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f38:	893b      	ldrh	r3, [r7, #8]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f48:	6a39      	ldr	r1, [r7, #32]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 fa20 	bl	8003390 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d107      	bne.n	8002f6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e005      	b.n	8002f7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f72:	893b      	ldrh	r3, [r7, #8]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	00010002 	.word	0x00010002

08002f8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	4608      	mov	r0, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	817b      	strh	r3, [r7, #10]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	813b      	strh	r3, [r7, #8]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f8c2 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fec:	d103      	bne.n	8002ff6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0aa      	b.n	8003150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ffa:	897b      	ldrh	r3, [r7, #10]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	4952      	ldr	r1, [pc, #328]	@ (8003158 <I2C_RequestMemoryRead+0x1cc>)
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f91d 	bl	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e097      	b.n	8003150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003038:	6a39      	ldr	r1, [r7, #32]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f9a8 	bl	8003390 <I2C_WaitOnTXEFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00d      	beq.n	8003062 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	2b04      	cmp	r3, #4
 800304c:	d107      	bne.n	800305e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e076      	b.n	8003150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003068:	893b      	ldrh	r3, [r7, #8]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]
 8003072:	e021      	b.n	80030b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003074:	893b      	ldrh	r3, [r7, #8]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	b29b      	uxth	r3, r3
 800307a:	b2da      	uxtb	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f982 	bl	8003390 <I2C_WaitOnTXEFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	2b04      	cmp	r3, #4
 8003098:	d107      	bne.n	80030aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e050      	b.n	8003150 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ae:	893b      	ldrh	r3, [r7, #8]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ba:	6a39      	ldr	r1, [r7, #32]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f967 	bl	8003390 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00d      	beq.n	80030e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d107      	bne.n	80030e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e035      	b.n	8003150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f82b 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800311a:	d103      	bne.n	8003124 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e013      	b.n	8003150 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003128:	897b      	ldrh	r3, [r7, #10]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	6a3a      	ldr	r2, [r7, #32]
 800313c:	4906      	ldr	r1, [pc, #24]	@ (8003158 <I2C_RequestMemoryRead+0x1cc>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f886 	bl	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	00010002 	.word	0x00010002

0800315c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316c:	e048      	b.n	8003200 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d044      	beq.n	8003200 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fd fe1f 	bl	8000db8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d139      	bne.n	8003200 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	0c1b      	lsrs	r3, r3, #16
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d10d      	bne.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	43da      	mvns	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4013      	ands	r3, r2
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	e00c      	b.n	80031cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d116      	bne.n	8003200 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e023      	b.n	8003248 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10d      	bne.n	8003226 <I2C_WaitOnFlagUntilTimeout+0xca>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	43da      	mvns	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	e00c      	b.n	8003240 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	43da      	mvns	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d093      	beq.n	800316e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800325e:	e071      	b.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326e:	d123      	bne.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003288:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e067      	b.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d041      	beq.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7fd fd7a 	bl	8000db8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d136      	bne.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10c      	bne.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e00b      	b.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	43da      	mvns	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d016      	beq.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e021      	b.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10c      	bne.n	8003368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	43da      	mvns	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4013      	ands	r3, r2
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf14      	ite	ne
 8003360:	2301      	movne	r3, #1
 8003362:	2300      	moveq	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e00b      	b.n	8003380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	43da      	mvns	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	bf14      	ite	ne
 800337a:	2301      	movne	r3, #1
 800337c:	2300      	moveq	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	f47f af6d 	bne.w	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800339c:	e034      	b.n	8003408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f8e3 	bl	800356a <I2C_IsAcknowledgeFailed>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e034      	b.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d028      	beq.n	8003408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fd fcff 	bl	8000db8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11d      	bne.n	8003408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d016      	beq.n	8003408 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003412:	2b80      	cmp	r3, #128	@ 0x80
 8003414:	d1c3      	bne.n	800339e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800342c:	e034      	b.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 f89b 	bl	800356a <I2C_IsAcknowledgeFailed>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e034      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d028      	beq.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003446:	f7fd fcb7 	bl	8000db8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11d      	bne.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d016      	beq.n	8003498 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e007      	b.n	80034a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d1c3      	bne.n	800342e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034bc:	e049      	b.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d119      	bne.n	8003500 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0210 	mvn.w	r2, #16
 80034d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e030      	b.n	8003562 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003500:	f7fd fc5a 	bl	8000db8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11d      	bne.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d016      	beq.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f043 0220 	orr.w	r2, r3, #32
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b40      	cmp	r3, #64	@ 0x40
 800355e:	d1ae      	bne.n	80034be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003580:	d11b      	bne.n	80035ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	f043 0204 	orr.w	r2, r3, #4
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e272      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8087 	beq.w	80036f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e8:	4b92      	ldr	r3, [pc, #584]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00c      	beq.n	800360e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d112      	bne.n	8003626 <HAL_RCC_OscConfig+0x5e>
 8003600:	4b8c      	ldr	r3, [pc, #560]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360e:	4b89      	ldr	r3, [pc, #548]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x12c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d168      	bne.n	80036f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e24c      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x76>
 8003630:	4b80      	ldr	r3, [pc, #512]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a7f      	ldr	r2, [pc, #508]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e02e      	b.n	800369c <HAL_RCC_OscConfig+0xd4>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x98>
 8003646:	4b7b      	ldr	r3, [pc, #492]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7a      	ldr	r2, [pc, #488]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800364c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b78      	ldr	r3, [pc, #480]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a77      	ldr	r2, [pc, #476]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003658:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xd4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0xbc>
 800366a:	4b72      	ldr	r3, [pc, #456]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a71      	ldr	r2, [pc, #452]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b6f      	ldr	r3, [pc, #444]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6e      	ldr	r2, [pc, #440]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xd4>
 8003684:	4b6b      	ldr	r3, [pc, #428]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6a      	ldr	r2, [pc, #424]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b68      	ldr	r3, [pc, #416]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a67      	ldr	r2, [pc, #412]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fd fb88 	bl	8000db8 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fd fb84 	bl	8000db8 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	@ 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e200      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b5d      	ldr	r3, [pc, #372]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xe4>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fd fb74 	bl	8000db8 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fd fb70 	bl	8000db8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	@ 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1ec      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x10c>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d063      	beq.n	80037ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003702:	4b4c      	ldr	r3, [pc, #304]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800370e:	4b49      	ldr	r3, [pc, #292]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11c      	bne.n	8003754 <HAL_RCC_OscConfig+0x18c>
 800371a:	4b46      	ldr	r3, [pc, #280]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	4b43      	ldr	r3, [pc, #268]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x176>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1c0      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b3d      	ldr	r3, [pc, #244]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4939      	ldr	r1, [pc, #228]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	e03a      	b.n	80037ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d020      	beq.n	800379e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4b36      	ldr	r3, [pc, #216]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd fb29 	bl	8000db8 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376a:	f7fd fb25 	bl	8000db8 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e1a1      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	4b2d      	ldr	r3, [pc, #180]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003788:	4b2a      	ldr	r3, [pc, #168]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4927      	ldr	r1, [pc, #156]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	600b      	str	r3, [r1, #0]
 800379c:	e015      	b.n	80037ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379e:	4b26      	ldr	r3, [pc, #152]	@ (8003838 <HAL_RCC_OscConfig+0x270>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fd fb08 	bl	8000db8 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ac:	f7fd fb04 	bl	8000db8 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e180      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	4b1d      	ldr	r3, [pc, #116]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d03a      	beq.n	800384c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d019      	beq.n	8003812 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037de:	4b17      	ldr	r3, [pc, #92]	@ (800383c <HAL_RCC_OscConfig+0x274>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7fd fae8 	bl	8000db8 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fd fae4 	bl	8000db8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e160      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <HAL_RCC_OscConfig+0x26c>)
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800380a:	2001      	movs	r0, #1
 800380c:	f000 face 	bl	8003dac <RCC_Delay>
 8003810:	e01c      	b.n	800384c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <HAL_RCC_OscConfig+0x274>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fd face 	bl	8000db8 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381e:	e00f      	b.n	8003840 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003820:	f7fd faca 	bl	8000db8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d908      	bls.n	8003840 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e146      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000
 8003838:	42420000 	.word	0x42420000
 800383c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	4b92      	ldr	r3, [pc, #584]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e9      	bne.n	8003820 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a6 	beq.w	80039a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b88      	ldr	r3, [pc, #544]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	4a87      	ldr	r2, [pc, #540]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003874:	61d3      	str	r3, [r2, #28]
 8003876:	4b85      	ldr	r3, [pc, #532]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003886:	4b82      	ldr	r3, [pc, #520]	@ (8003a90 <HAL_RCC_OscConfig+0x4c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d118      	bne.n	80038c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003892:	4b7f      	ldr	r3, [pc, #508]	@ (8003a90 <HAL_RCC_OscConfig+0x4c8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7e      	ldr	r2, [pc, #504]	@ (8003a90 <HAL_RCC_OscConfig+0x4c8>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389e:	f7fd fa8b 	bl	8000db8 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a6:	f7fd fa87 	bl	8000db8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b64      	cmp	r3, #100	@ 0x64
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e103      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4b75      	ldr	r3, [pc, #468]	@ (8003a90 <HAL_RCC_OscConfig+0x4c8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d106      	bne.n	80038da <HAL_RCC_OscConfig+0x312>
 80038cc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6213      	str	r3, [r2, #32]
 80038d8:	e02d      	b.n	8003936 <HAL_RCC_OscConfig+0x36e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0x334>
 80038e2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	4a69      	ldr	r2, [pc, #420]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	6213      	str	r3, [r2, #32]
 80038ee:	4b67      	ldr	r3, [pc, #412]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4a66      	ldr	r2, [pc, #408]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	e01c      	b.n	8003936 <HAL_RCC_OscConfig+0x36e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b05      	cmp	r3, #5
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0x356>
 8003904:	4b61      	ldr	r3, [pc, #388]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a60      	ldr	r2, [pc, #384]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	4b5e      	ldr	r3, [pc, #376]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4a5d      	ldr	r2, [pc, #372]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6213      	str	r3, [r2, #32]
 800391c:	e00b      	b.n	8003936 <HAL_RCC_OscConfig+0x36e>
 800391e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	4a5a      	ldr	r2, [pc, #360]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6213      	str	r3, [r2, #32]
 800392a:	4b58      	ldr	r3, [pc, #352]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4a57      	ldr	r2, [pc, #348]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fd fa3b 	bl	8000db8 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fd fa37 	bl	8000db8 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0b1      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ee      	beq.n	8003946 <HAL_RCC_OscConfig+0x37e>
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396a:	f7fd fa25 	bl	8000db8 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fd fa21 	bl	8000db8 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e09b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003988:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ee      	bne.n	8003972 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003994:	7dfb      	ldrb	r3, [r7, #23]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8087 	beq.w	8003abe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b0:	4b36      	ldr	r3, [pc, #216]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d061      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d146      	bne.n	8003a52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b33      	ldr	r3, [pc, #204]	@ (8003a94 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7fd f9f5 	bl	8000db8 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fd f9f1 	bl	8000db8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e06d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e4:	4b29      	ldr	r3, [pc, #164]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f0      	bne.n	80039d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f8:	d108      	bne.n	8003a0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039fa:	4b24      	ldr	r3, [pc, #144]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4921      	ldr	r1, [pc, #132]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a19      	ldr	r1, [r3, #32]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	491b      	ldr	r1, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fd f9c5 	bl	8000db8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fd f9c1 	bl	8000db8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e03d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x46a>
 8003a50:	e035      	b.n	8003abe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCC_OscConfig+0x4cc>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fd f9ae 	bl	8000db8 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fd f9aa 	bl	8000db8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e026      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x498>
 8003a7e:	e01e      	b.n	8003abe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e019      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40007000 	.word	0x40007000
 8003a94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_OscConfig+0x500>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d106      	bne.n	8003aba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000

08003acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0d0      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae0:	4b6a      	ldr	r3, [pc, #424]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d910      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aee:	4b67      	ldr	r3, [pc, #412]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 0207 	bic.w	r2, r3, #7
 8003af6:	4965      	ldr	r1, [pc, #404]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b63      	ldr	r3, [pc, #396]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0b8      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b28:	4b59      	ldr	r3, [pc, #356]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a58      	ldr	r2, [pc, #352]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b40:	4b53      	ldr	r3, [pc, #332]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a52      	ldr	r2, [pc, #328]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003b4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b50      	ldr	r3, [pc, #320]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	494d      	ldr	r1, [pc, #308]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d040      	beq.n	8003bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4b47      	ldr	r3, [pc, #284]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d115      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e07f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8a:	4b41      	ldr	r3, [pc, #260]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e073      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e06b      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003baa:	4b39      	ldr	r3, [pc, #228]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f023 0203 	bic.w	r2, r3, #3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4936      	ldr	r1, [pc, #216]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bbc:	f7fd f8fc 	bl	8000db8 <HAL_GetTick>
 8003bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	e00a      	b.n	8003bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc4:	f7fd f8f8 	bl	8000db8 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e053      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	4b2d      	ldr	r3, [pc, #180]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 020c 	and.w	r2, r3, #12
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d1eb      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bec:	4b27      	ldr	r3, [pc, #156]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d210      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b24      	ldr	r3, [pc, #144]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 0207 	bic.w	r2, r3, #7
 8003c02:	4922      	ldr	r1, [pc, #136]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e032      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c28:	4b19      	ldr	r3, [pc, #100]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c46:	4b12      	ldr	r3, [pc, #72]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	490e      	ldr	r1, [pc, #56]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c5a:	f000 f821 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	490a      	ldr	r1, [pc, #40]	@ (8003c94 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	5ccb      	ldrb	r3, [r1, r3]
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	4a09      	ldr	r2, [pc, #36]	@ (8003c98 <HAL_RCC_ClockConfig+0x1cc>)
 8003c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c76:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_ClockConfig+0x1d0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd f85a 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40021000 	.word	0x40021000
 8003c94:	08005a40 	.word	0x08005a40
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	20000004 	.word	0x20000004

08003ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cba:	4b1e      	ldr	r3, [pc, #120]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x30>
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x36>
 8003cce:	e027      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cd0:	4b19      	ldr	r3, [pc, #100]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cd2:	613b      	str	r3, [r7, #16]
      break;
 8003cd4:	e027      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	0c9b      	lsrs	r3, r3, #18
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	4a17      	ldr	r2, [pc, #92]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ce0:	5cd3      	ldrb	r3, [r2, r3]
 8003ce2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cee:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	0c5b      	lsrs	r3, r3, #17
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	4a11      	ldr	r2, [pc, #68]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cfa:	5cd3      	ldrb	r3, [r2, r3]
 8003cfc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a0d      	ldr	r2, [pc, #52]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d02:	fb03 f202 	mul.w	r2, r3, r2
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e004      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0c      	ldr	r2, [pc, #48]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d14:	fb02 f303 	mul.w	r3, r2, r3
 8003d18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	613b      	str	r3, [r7, #16]
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d22:	613b      	str	r3, [r7, #16]
      break;
 8003d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d26:	693b      	ldr	r3, [r7, #16]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40021000 	.word	0x40021000
 8003d38:	007a1200 	.word	0x007a1200
 8003d3c:	08005a58 	.word	0x08005a58
 8003d40:	08005a68 	.word	0x08005a68
 8003d44:	003d0900 	.word	0x003d0900

08003d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d4c:	4b02      	ldr	r3, [pc, #8]	@ (8003d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr
 8003d58:	20000000 	.word	0x20000000

08003d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d60:	f7ff fff2 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4903      	ldr	r1, [pc, #12]	@ (8003d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	08005a50 	.word	0x08005a50

08003d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d88:	f7ff ffde 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	0adb      	lsrs	r3, r3, #11
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	4903      	ldr	r1, [pc, #12]	@ (8003da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d9a:	5ccb      	ldrb	r3, [r1, r3]
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000
 8003da8:	08005a50 	.word	0x08005a50

08003dac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003db4:	4b0a      	ldr	r3, [pc, #40]	@ (8003de0 <RCC_Delay+0x34>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0a      	ldr	r2, [pc, #40]	@ (8003de4 <RCC_Delay+0x38>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0a5b      	lsrs	r3, r3, #9
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dc8:	bf00      	nop
  }
  while (Delay --);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1e5a      	subs	r2, r3, #1
 8003dce:	60fa      	str	r2, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f9      	bne.n	8003dc8 <RCC_Delay+0x1c>
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	20000000 	.word	0x20000000
 8003de4:	10624dd3 	.word	0x10624dd3

08003de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e042      	b.n	8003e80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fe2c 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	@ 0x24
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f971 	bl	8004114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	@ 0x28
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d175      	bne.n	8003f94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_UART_Transmit+0x2c>
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e06e      	b.n	8003f96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2221      	movs	r2, #33	@ 0x21
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec6:	f7fc ff77 	bl	8000db8 <HAL_GetTick>
 8003eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee0:	d108      	bne.n	8003ef4 <HAL_UART_Transmit+0x6c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d104      	bne.n	8003ef4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	61bb      	str	r3, [r7, #24]
 8003ef2:	e003      	b.n	8003efc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003efc:	e02e      	b.n	8003f5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2200      	movs	r2, #0
 8003f06:	2180      	movs	r1, #128	@ 0x80
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f848 	bl	8003f9e <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d005      	beq.n	8003f20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e03a      	b.n	8003f96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e007      	b.n	8003f4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1cb      	bne.n	8003efe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2140      	movs	r1, #64	@ 0x40
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f814 	bl	8003f9e <UART_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e006      	b.n	8003f96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	603b      	str	r3, [r7, #0]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fae:	e03b      	b.n	8004028 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb6:	d037      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb8:	f7fc fefe 	bl	8000db8 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	6a3a      	ldr	r2, [r7, #32]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d302      	bcc.n	8003fce <UART_WaitOnFlagUntilTimeout+0x30>
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e03a      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d023      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b80      	cmp	r3, #128	@ 0x80
 8003fe4:	d020      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b40      	cmp	r3, #64	@ 0x40
 8003fea:	d01d      	beq.n	8004028 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d116      	bne.n	8004028 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f81d 	bl	8004050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2208      	movs	r2, #8
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e00f      	b.n	8004048 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d0b4      	beq.n	8003fb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004050:	b480      	push	{r7}
 8004052:	b095      	sub	sp, #84	@ 0x54
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004062:	e853 3f00 	ldrex	r3, [r3]
 8004066:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004078:	643a      	str	r2, [r7, #64]	@ 0x40
 800407a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800407e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e5      	bne.n	8004058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	61fb      	str	r3, [r7, #28]
   return(result);
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d119      	bne.n	80040fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f023 0310 	bic.w	r3, r3, #16
 80040de:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040e8:	61ba      	str	r2, [r7, #24]
 80040ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6979      	ldr	r1, [r7, #20]
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	613b      	str	r3, [r7, #16]
   return(result);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800410a:	bf00      	nop
 800410c:	3754      	adds	r7, #84	@ 0x54
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800414e:	f023 030c 	bic.w	r3, r3, #12
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	430b      	orrs	r3, r1
 800415a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2c      	ldr	r2, [pc, #176]	@ (8004228 <UART_SetConfig+0x114>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d103      	bne.n	8004184 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800417c:	f7ff fe02 	bl	8003d84 <HAL_RCC_GetPCLK2Freq>
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	e002      	b.n	800418a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7ff fdea 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 8004188:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	4a22      	ldr	r2, [pc, #136]	@ (800422c <UART_SetConfig+0x118>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	0119      	lsls	r1, r3, #4
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009a      	lsls	r2, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c0:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <UART_SetConfig+0x118>)
 80041c2:	fba3 0302 	umull	r0, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2064      	movs	r0, #100	@ 0x64
 80041ca:	fb00 f303 	mul.w	r3, r0, r3
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	3332      	adds	r3, #50	@ 0x32
 80041d4:	4a15      	ldr	r2, [pc, #84]	@ (800422c <UART_SetConfig+0x118>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e0:	4419      	add	r1, r3
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f8:	4b0c      	ldr	r3, [pc, #48]	@ (800422c <UART_SetConfig+0x118>)
 80041fa:	fba3 0302 	umull	r0, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2064      	movs	r0, #100	@ 0x64
 8004202:	fb00 f303 	mul.w	r3, r0, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	@ 0x32
 800420c:	4a07      	ldr	r2, [pc, #28]	@ (800422c <UART_SetConfig+0x118>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 020f 	and.w	r2, r3, #15
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	440a      	add	r2, r1
 800421e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40013800 	.word	0x40013800
 800422c:	51eb851f 	.word	0x51eb851f

08004230 <std>:
 8004230:	2300      	movs	r3, #0
 8004232:	b510      	push	{r4, lr}
 8004234:	4604      	mov	r4, r0
 8004236:	e9c0 3300 	strd	r3, r3, [r0]
 800423a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800423e:	6083      	str	r3, [r0, #8]
 8004240:	8181      	strh	r1, [r0, #12]
 8004242:	6643      	str	r3, [r0, #100]	@ 0x64
 8004244:	81c2      	strh	r2, [r0, #14]
 8004246:	6183      	str	r3, [r0, #24]
 8004248:	4619      	mov	r1, r3
 800424a:	2208      	movs	r2, #8
 800424c:	305c      	adds	r0, #92	@ 0x5c
 800424e:	f000 fa2f 	bl	80046b0 <memset>
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <std+0x58>)
 8004254:	6224      	str	r4, [r4, #32]
 8004256:	6263      	str	r3, [r4, #36]	@ 0x24
 8004258:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <std+0x5c>)
 800425a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <std+0x60>)
 800425e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004260:	4b0c      	ldr	r3, [pc, #48]	@ (8004294 <std+0x64>)
 8004262:	6323      	str	r3, [r4, #48]	@ 0x30
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <std+0x68>)
 8004266:	429c      	cmp	r4, r3
 8004268:	d006      	beq.n	8004278 <std+0x48>
 800426a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800426e:	4294      	cmp	r4, r2
 8004270:	d002      	beq.n	8004278 <std+0x48>
 8004272:	33d0      	adds	r3, #208	@ 0xd0
 8004274:	429c      	cmp	r4, r3
 8004276:	d105      	bne.n	8004284 <std+0x54>
 8004278:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800427c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004280:	f000 ba8e 	b.w	80047a0 <__retarget_lock_init_recursive>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	bf00      	nop
 8004288:	08004501 	.word	0x08004501
 800428c:	08004523 	.word	0x08004523
 8004290:	0800455b 	.word	0x0800455b
 8004294:	0800457f 	.word	0x0800457f
 8004298:	20000180 	.word	0x20000180

0800429c <stdio_exit_handler>:
 800429c:	4a02      	ldr	r2, [pc, #8]	@ (80042a8 <stdio_exit_handler+0xc>)
 800429e:	4903      	ldr	r1, [pc, #12]	@ (80042ac <stdio_exit_handler+0x10>)
 80042a0:	4803      	ldr	r0, [pc, #12]	@ (80042b0 <stdio_exit_handler+0x14>)
 80042a2:	f000 b869 	b.w	8004378 <_fwalk_sglue>
 80042a6:	bf00      	nop
 80042a8:	2000000c 	.word	0x2000000c
 80042ac:	080052e5 	.word	0x080052e5
 80042b0:	2000001c 	.word	0x2000001c

080042b4 <cleanup_stdio>:
 80042b4:	6841      	ldr	r1, [r0, #4]
 80042b6:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <cleanup_stdio+0x34>)
 80042b8:	b510      	push	{r4, lr}
 80042ba:	4299      	cmp	r1, r3
 80042bc:	4604      	mov	r4, r0
 80042be:	d001      	beq.n	80042c4 <cleanup_stdio+0x10>
 80042c0:	f001 f810 	bl	80052e4 <_fflush_r>
 80042c4:	68a1      	ldr	r1, [r4, #8]
 80042c6:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <cleanup_stdio+0x38>)
 80042c8:	4299      	cmp	r1, r3
 80042ca:	d002      	beq.n	80042d2 <cleanup_stdio+0x1e>
 80042cc:	4620      	mov	r0, r4
 80042ce:	f001 f809 	bl	80052e4 <_fflush_r>
 80042d2:	68e1      	ldr	r1, [r4, #12]
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <cleanup_stdio+0x3c>)
 80042d6:	4299      	cmp	r1, r3
 80042d8:	d004      	beq.n	80042e4 <cleanup_stdio+0x30>
 80042da:	4620      	mov	r0, r4
 80042dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e0:	f001 b800 	b.w	80052e4 <_fflush_r>
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	bf00      	nop
 80042e8:	20000180 	.word	0x20000180
 80042ec:	200001e8 	.word	0x200001e8
 80042f0:	20000250 	.word	0x20000250

080042f4 <global_stdio_init.part.0>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <global_stdio_init.part.0+0x30>)
 80042f8:	4c0b      	ldr	r4, [pc, #44]	@ (8004328 <global_stdio_init.part.0+0x34>)
 80042fa:	4a0c      	ldr	r2, [pc, #48]	@ (800432c <global_stdio_init.part.0+0x38>)
 80042fc:	4620      	mov	r0, r4
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	2104      	movs	r1, #4
 8004302:	2200      	movs	r2, #0
 8004304:	f7ff ff94 	bl	8004230 <std>
 8004308:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800430c:	2201      	movs	r2, #1
 800430e:	2109      	movs	r1, #9
 8004310:	f7ff ff8e 	bl	8004230 <std>
 8004314:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004318:	2202      	movs	r2, #2
 800431a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431e:	2112      	movs	r1, #18
 8004320:	f7ff bf86 	b.w	8004230 <std>
 8004324:	200002b8 	.word	0x200002b8
 8004328:	20000180 	.word	0x20000180
 800432c:	0800429d 	.word	0x0800429d

08004330 <__sfp_lock_acquire>:
 8004330:	4801      	ldr	r0, [pc, #4]	@ (8004338 <__sfp_lock_acquire+0x8>)
 8004332:	f000 ba36 	b.w	80047a2 <__retarget_lock_acquire_recursive>
 8004336:	bf00      	nop
 8004338:	200002c1 	.word	0x200002c1

0800433c <__sfp_lock_release>:
 800433c:	4801      	ldr	r0, [pc, #4]	@ (8004344 <__sfp_lock_release+0x8>)
 800433e:	f000 ba31 	b.w	80047a4 <__retarget_lock_release_recursive>
 8004342:	bf00      	nop
 8004344:	200002c1 	.word	0x200002c1

08004348 <__sinit>:
 8004348:	b510      	push	{r4, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	f7ff fff0 	bl	8004330 <__sfp_lock_acquire>
 8004350:	6a23      	ldr	r3, [r4, #32]
 8004352:	b11b      	cbz	r3, 800435c <__sinit+0x14>
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004358:	f7ff bff0 	b.w	800433c <__sfp_lock_release>
 800435c:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <__sinit+0x28>)
 800435e:	6223      	str	r3, [r4, #32]
 8004360:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <__sinit+0x2c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f5      	bne.n	8004354 <__sinit+0xc>
 8004368:	f7ff ffc4 	bl	80042f4 <global_stdio_init.part.0>
 800436c:	e7f2      	b.n	8004354 <__sinit+0xc>
 800436e:	bf00      	nop
 8004370:	080042b5 	.word	0x080042b5
 8004374:	200002b8 	.word	0x200002b8

08004378 <_fwalk_sglue>:
 8004378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800437c:	4607      	mov	r7, r0
 800437e:	4688      	mov	r8, r1
 8004380:	4614      	mov	r4, r2
 8004382:	2600      	movs	r6, #0
 8004384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004388:	f1b9 0901 	subs.w	r9, r9, #1
 800438c:	d505      	bpl.n	800439a <_fwalk_sglue+0x22>
 800438e:	6824      	ldr	r4, [r4, #0]
 8004390:	2c00      	cmp	r4, #0
 8004392:	d1f7      	bne.n	8004384 <_fwalk_sglue+0xc>
 8004394:	4630      	mov	r0, r6
 8004396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439a:	89ab      	ldrh	r3, [r5, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d907      	bls.n	80043b0 <_fwalk_sglue+0x38>
 80043a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043a4:	3301      	adds	r3, #1
 80043a6:	d003      	beq.n	80043b0 <_fwalk_sglue+0x38>
 80043a8:	4629      	mov	r1, r5
 80043aa:	4638      	mov	r0, r7
 80043ac:	47c0      	blx	r8
 80043ae:	4306      	orrs	r6, r0
 80043b0:	3568      	adds	r5, #104	@ 0x68
 80043b2:	e7e9      	b.n	8004388 <_fwalk_sglue+0x10>

080043b4 <iprintf>:
 80043b4:	b40f      	push	{r0, r1, r2, r3}
 80043b6:	b507      	push	{r0, r1, r2, lr}
 80043b8:	4906      	ldr	r1, [pc, #24]	@ (80043d4 <iprintf+0x20>)
 80043ba:	ab04      	add	r3, sp, #16
 80043bc:	6808      	ldr	r0, [r1, #0]
 80043be:	f853 2b04 	ldr.w	r2, [r3], #4
 80043c2:	6881      	ldr	r1, [r0, #8]
 80043c4:	9301      	str	r3, [sp, #4]
 80043c6:	f000 fc65 	bl	8004c94 <_vfiprintf_r>
 80043ca:	b003      	add	sp, #12
 80043cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d0:	b004      	add	sp, #16
 80043d2:	4770      	bx	lr
 80043d4:	20000018 	.word	0x20000018

080043d8 <_puts_r>:
 80043d8:	6a03      	ldr	r3, [r0, #32]
 80043da:	b570      	push	{r4, r5, r6, lr}
 80043dc:	4605      	mov	r5, r0
 80043de:	460e      	mov	r6, r1
 80043e0:	6884      	ldr	r4, [r0, #8]
 80043e2:	b90b      	cbnz	r3, 80043e8 <_puts_r+0x10>
 80043e4:	f7ff ffb0 	bl	8004348 <__sinit>
 80043e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043ea:	07db      	lsls	r3, r3, #31
 80043ec:	d405      	bmi.n	80043fa <_puts_r+0x22>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	0598      	lsls	r0, r3, #22
 80043f2:	d402      	bmi.n	80043fa <_puts_r+0x22>
 80043f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043f6:	f000 f9d4 	bl	80047a2 <__retarget_lock_acquire_recursive>
 80043fa:	89a3      	ldrh	r3, [r4, #12]
 80043fc:	0719      	lsls	r1, r3, #28
 80043fe:	d502      	bpl.n	8004406 <_puts_r+0x2e>
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d135      	bne.n	8004472 <_puts_r+0x9a>
 8004406:	4621      	mov	r1, r4
 8004408:	4628      	mov	r0, r5
 800440a:	f000 f8fb 	bl	8004604 <__swsetup_r>
 800440e:	b380      	cbz	r0, 8004472 <_puts_r+0x9a>
 8004410:	f04f 35ff 	mov.w	r5, #4294967295
 8004414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004416:	07da      	lsls	r2, r3, #31
 8004418:	d405      	bmi.n	8004426 <_puts_r+0x4e>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	059b      	lsls	r3, r3, #22
 800441e:	d402      	bmi.n	8004426 <_puts_r+0x4e>
 8004420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004422:	f000 f9bf 	bl	80047a4 <__retarget_lock_release_recursive>
 8004426:	4628      	mov	r0, r5
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	2b00      	cmp	r3, #0
 800442c:	da04      	bge.n	8004438 <_puts_r+0x60>
 800442e:	69a2      	ldr	r2, [r4, #24]
 8004430:	429a      	cmp	r2, r3
 8004432:	dc17      	bgt.n	8004464 <_puts_r+0x8c>
 8004434:	290a      	cmp	r1, #10
 8004436:	d015      	beq.n	8004464 <_puts_r+0x8c>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	7019      	strb	r1, [r3, #0]
 8004440:	68a3      	ldr	r3, [r4, #8]
 8004442:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004446:	3b01      	subs	r3, #1
 8004448:	60a3      	str	r3, [r4, #8]
 800444a:	2900      	cmp	r1, #0
 800444c:	d1ed      	bne.n	800442a <_puts_r+0x52>
 800444e:	2b00      	cmp	r3, #0
 8004450:	da11      	bge.n	8004476 <_puts_r+0x9e>
 8004452:	4622      	mov	r2, r4
 8004454:	210a      	movs	r1, #10
 8004456:	4628      	mov	r0, r5
 8004458:	f000 f895 	bl	8004586 <__swbuf_r>
 800445c:	3001      	adds	r0, #1
 800445e:	d0d7      	beq.n	8004410 <_puts_r+0x38>
 8004460:	250a      	movs	r5, #10
 8004462:	e7d7      	b.n	8004414 <_puts_r+0x3c>
 8004464:	4622      	mov	r2, r4
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f88d 	bl	8004586 <__swbuf_r>
 800446c:	3001      	adds	r0, #1
 800446e:	d1e7      	bne.n	8004440 <_puts_r+0x68>
 8004470:	e7ce      	b.n	8004410 <_puts_r+0x38>
 8004472:	3e01      	subs	r6, #1
 8004474:	e7e4      	b.n	8004440 <_puts_r+0x68>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	6022      	str	r2, [r4, #0]
 800447c:	220a      	movs	r2, #10
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e7ee      	b.n	8004460 <_puts_r+0x88>
	...

08004484 <puts>:
 8004484:	4b02      	ldr	r3, [pc, #8]	@ (8004490 <puts+0xc>)
 8004486:	4601      	mov	r1, r0
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	f7ff bfa5 	b.w	80043d8 <_puts_r>
 800448e:	bf00      	nop
 8004490:	20000018 	.word	0x20000018

08004494 <sniprintf>:
 8004494:	b40c      	push	{r2, r3}
 8004496:	b530      	push	{r4, r5, lr}
 8004498:	4b18      	ldr	r3, [pc, #96]	@ (80044fc <sniprintf+0x68>)
 800449a:	1e0c      	subs	r4, r1, #0
 800449c:	681d      	ldr	r5, [r3, #0]
 800449e:	b09d      	sub	sp, #116	@ 0x74
 80044a0:	da08      	bge.n	80044b4 <sniprintf+0x20>
 80044a2:	238b      	movs	r3, #139	@ 0x8b
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	602b      	str	r3, [r5, #0]
 80044aa:	b01d      	add	sp, #116	@ 0x74
 80044ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044b0:	b002      	add	sp, #8
 80044b2:	4770      	bx	lr
 80044b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80044c2:	bf0c      	ite	eq
 80044c4:	4623      	moveq	r3, r4
 80044c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044ca:	9304      	str	r3, [sp, #16]
 80044cc:	9307      	str	r3, [sp, #28]
 80044ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044d2:	9002      	str	r0, [sp, #8]
 80044d4:	9006      	str	r0, [sp, #24]
 80044d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044da:	4628      	mov	r0, r5
 80044dc:	ab21      	add	r3, sp, #132	@ 0x84
 80044de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80044e0:	a902      	add	r1, sp, #8
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	f000 fab2 	bl	8004a4c <_svfiprintf_r>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	bfbc      	itt	lt
 80044ec:	238b      	movlt	r3, #139	@ 0x8b
 80044ee:	602b      	strlt	r3, [r5, #0]
 80044f0:	2c00      	cmp	r4, #0
 80044f2:	d0da      	beq.n	80044aa <sniprintf+0x16>
 80044f4:	2200      	movs	r2, #0
 80044f6:	9b02      	ldr	r3, [sp, #8]
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e7d6      	b.n	80044aa <sniprintf+0x16>
 80044fc:	20000018 	.word	0x20000018

08004500 <__sread>:
 8004500:	b510      	push	{r4, lr}
 8004502:	460c      	mov	r4, r1
 8004504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004508:	f000 f8fc 	bl	8004704 <_read_r>
 800450c:	2800      	cmp	r0, #0
 800450e:	bfab      	itete	ge
 8004510:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004512:	89a3      	ldrhlt	r3, [r4, #12]
 8004514:	181b      	addge	r3, r3, r0
 8004516:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800451a:	bfac      	ite	ge
 800451c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800451e:	81a3      	strhlt	r3, [r4, #12]
 8004520:	bd10      	pop	{r4, pc}

08004522 <__swrite>:
 8004522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004526:	461f      	mov	r7, r3
 8004528:	898b      	ldrh	r3, [r1, #12]
 800452a:	4605      	mov	r5, r0
 800452c:	05db      	lsls	r3, r3, #23
 800452e:	460c      	mov	r4, r1
 8004530:	4616      	mov	r6, r2
 8004532:	d505      	bpl.n	8004540 <__swrite+0x1e>
 8004534:	2302      	movs	r3, #2
 8004536:	2200      	movs	r2, #0
 8004538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453c:	f000 f8d0 	bl	80046e0 <_lseek_r>
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	4632      	mov	r2, r6
 8004544:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004548:	81a3      	strh	r3, [r4, #12]
 800454a:	4628      	mov	r0, r5
 800454c:	463b      	mov	r3, r7
 800454e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004556:	f000 b8e7 	b.w	8004728 <_write_r>

0800455a <__sseek>:
 800455a:	b510      	push	{r4, lr}
 800455c:	460c      	mov	r4, r1
 800455e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004562:	f000 f8bd 	bl	80046e0 <_lseek_r>
 8004566:	1c43      	adds	r3, r0, #1
 8004568:	89a3      	ldrh	r3, [r4, #12]
 800456a:	bf15      	itete	ne
 800456c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800456e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004576:	81a3      	strheq	r3, [r4, #12]
 8004578:	bf18      	it	ne
 800457a:	81a3      	strhne	r3, [r4, #12]
 800457c:	bd10      	pop	{r4, pc}

0800457e <__sclose>:
 800457e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004582:	f000 b89d 	b.w	80046c0 <_close_r>

08004586 <__swbuf_r>:
 8004586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004588:	460e      	mov	r6, r1
 800458a:	4614      	mov	r4, r2
 800458c:	4605      	mov	r5, r0
 800458e:	b118      	cbz	r0, 8004598 <__swbuf_r+0x12>
 8004590:	6a03      	ldr	r3, [r0, #32]
 8004592:	b90b      	cbnz	r3, 8004598 <__swbuf_r+0x12>
 8004594:	f7ff fed8 	bl	8004348 <__sinit>
 8004598:	69a3      	ldr	r3, [r4, #24]
 800459a:	60a3      	str	r3, [r4, #8]
 800459c:	89a3      	ldrh	r3, [r4, #12]
 800459e:	071a      	lsls	r2, r3, #28
 80045a0:	d501      	bpl.n	80045a6 <__swbuf_r+0x20>
 80045a2:	6923      	ldr	r3, [r4, #16]
 80045a4:	b943      	cbnz	r3, 80045b8 <__swbuf_r+0x32>
 80045a6:	4621      	mov	r1, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 f82b 	bl	8004604 <__swsetup_r>
 80045ae:	b118      	cbz	r0, 80045b8 <__swbuf_r+0x32>
 80045b0:	f04f 37ff 	mov.w	r7, #4294967295
 80045b4:	4638      	mov	r0, r7
 80045b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	6922      	ldr	r2, [r4, #16]
 80045bc:	b2f6      	uxtb	r6, r6
 80045be:	1a98      	subs	r0, r3, r2
 80045c0:	6963      	ldr	r3, [r4, #20]
 80045c2:	4637      	mov	r7, r6
 80045c4:	4283      	cmp	r3, r0
 80045c6:	dc05      	bgt.n	80045d4 <__swbuf_r+0x4e>
 80045c8:	4621      	mov	r1, r4
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 fe8a 	bl	80052e4 <_fflush_r>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d1ed      	bne.n	80045b0 <__swbuf_r+0x2a>
 80045d4:	68a3      	ldr	r3, [r4, #8]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	60a3      	str	r3, [r4, #8]
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	6022      	str	r2, [r4, #0]
 80045e0:	701e      	strb	r6, [r3, #0]
 80045e2:	6962      	ldr	r2, [r4, #20]
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d004      	beq.n	80045f4 <__swbuf_r+0x6e>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	07db      	lsls	r3, r3, #31
 80045ee:	d5e1      	bpl.n	80045b4 <__swbuf_r+0x2e>
 80045f0:	2e0a      	cmp	r6, #10
 80045f2:	d1df      	bne.n	80045b4 <__swbuf_r+0x2e>
 80045f4:	4621      	mov	r1, r4
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 fe74 	bl	80052e4 <_fflush_r>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d0d9      	beq.n	80045b4 <__swbuf_r+0x2e>
 8004600:	e7d6      	b.n	80045b0 <__swbuf_r+0x2a>
	...

08004604 <__swsetup_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4b29      	ldr	r3, [pc, #164]	@ (80046ac <__swsetup_r+0xa8>)
 8004608:	4605      	mov	r5, r0
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	460c      	mov	r4, r1
 800460e:	b118      	cbz	r0, 8004618 <__swsetup_r+0x14>
 8004610:	6a03      	ldr	r3, [r0, #32]
 8004612:	b90b      	cbnz	r3, 8004618 <__swsetup_r+0x14>
 8004614:	f7ff fe98 	bl	8004348 <__sinit>
 8004618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461c:	0719      	lsls	r1, r3, #28
 800461e:	d422      	bmi.n	8004666 <__swsetup_r+0x62>
 8004620:	06da      	lsls	r2, r3, #27
 8004622:	d407      	bmi.n	8004634 <__swsetup_r+0x30>
 8004624:	2209      	movs	r2, #9
 8004626:	602a      	str	r2, [r5, #0]
 8004628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	e033      	b.n	800469c <__swsetup_r+0x98>
 8004634:	0758      	lsls	r0, r3, #29
 8004636:	d512      	bpl.n	800465e <__swsetup_r+0x5a>
 8004638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800463a:	b141      	cbz	r1, 800464e <__swsetup_r+0x4a>
 800463c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004640:	4299      	cmp	r1, r3
 8004642:	d002      	beq.n	800464a <__swsetup_r+0x46>
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f8af 	bl	80047a8 <_free_r>
 800464a:	2300      	movs	r3, #0
 800464c:	6363      	str	r3, [r4, #52]	@ 0x34
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004654:	81a3      	strh	r3, [r4, #12]
 8004656:	2300      	movs	r3, #0
 8004658:	6063      	str	r3, [r4, #4]
 800465a:	6923      	ldr	r3, [r4, #16]
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	f043 0308 	orr.w	r3, r3, #8
 8004664:	81a3      	strh	r3, [r4, #12]
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	b94b      	cbnz	r3, 800467e <__swsetup_r+0x7a>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004674:	d003      	beq.n	800467e <__swsetup_r+0x7a>
 8004676:	4621      	mov	r1, r4
 8004678:	4628      	mov	r0, r5
 800467a:	f000 fe80 	bl	800537e <__smakebuf_r>
 800467e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004682:	f013 0201 	ands.w	r2, r3, #1
 8004686:	d00a      	beq.n	800469e <__swsetup_r+0x9a>
 8004688:	2200      	movs	r2, #0
 800468a:	60a2      	str	r2, [r4, #8]
 800468c:	6962      	ldr	r2, [r4, #20]
 800468e:	4252      	negs	r2, r2
 8004690:	61a2      	str	r2, [r4, #24]
 8004692:	6922      	ldr	r2, [r4, #16]
 8004694:	b942      	cbnz	r2, 80046a8 <__swsetup_r+0xa4>
 8004696:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800469a:	d1c5      	bne.n	8004628 <__swsetup_r+0x24>
 800469c:	bd38      	pop	{r3, r4, r5, pc}
 800469e:	0799      	lsls	r1, r3, #30
 80046a0:	bf58      	it	pl
 80046a2:	6962      	ldrpl	r2, [r4, #20]
 80046a4:	60a2      	str	r2, [r4, #8]
 80046a6:	e7f4      	b.n	8004692 <__swsetup_r+0x8e>
 80046a8:	2000      	movs	r0, #0
 80046aa:	e7f7      	b.n	800469c <__swsetup_r+0x98>
 80046ac:	20000018 	.word	0x20000018

080046b0 <memset>:
 80046b0:	4603      	mov	r3, r0
 80046b2:	4402      	add	r2, r0
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d100      	bne.n	80046ba <memset+0xa>
 80046b8:	4770      	bx	lr
 80046ba:	f803 1b01 	strb.w	r1, [r3], #1
 80046be:	e7f9      	b.n	80046b4 <memset+0x4>

080046c0 <_close_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	2300      	movs	r3, #0
 80046c4:	4d05      	ldr	r5, [pc, #20]	@ (80046dc <_close_r+0x1c>)
 80046c6:	4604      	mov	r4, r0
 80046c8:	4608      	mov	r0, r1
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	f7fc fa89 	bl	8000be2 <_close>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d102      	bne.n	80046da <_close_r+0x1a>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	b103      	cbz	r3, 80046da <_close_r+0x1a>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	200002bc 	.word	0x200002bc

080046e0 <_lseek_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4604      	mov	r4, r0
 80046e4:	4608      	mov	r0, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	2200      	movs	r2, #0
 80046ea:	4d05      	ldr	r5, [pc, #20]	@ (8004700 <_lseek_r+0x20>)
 80046ec:	602a      	str	r2, [r5, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f7fc fa9b 	bl	8000c2a <_lseek>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d102      	bne.n	80046fe <_lseek_r+0x1e>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	b103      	cbz	r3, 80046fe <_lseek_r+0x1e>
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	200002bc 	.word	0x200002bc

08004704 <_read_r>:
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	2200      	movs	r2, #0
 800470e:	4d05      	ldr	r5, [pc, #20]	@ (8004724 <_read_r+0x20>)
 8004710:	602a      	str	r2, [r5, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	f7fc fa2c 	bl	8000b70 <_read>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d102      	bne.n	8004722 <_read_r+0x1e>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	b103      	cbz	r3, 8004722 <_read_r+0x1e>
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	200002bc 	.word	0x200002bc

08004728 <_write_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4604      	mov	r4, r0
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	2200      	movs	r2, #0
 8004732:	4d05      	ldr	r5, [pc, #20]	@ (8004748 <_write_r+0x20>)
 8004734:	602a      	str	r2, [r5, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	f7fc fa37 	bl	8000baa <_write>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_write_r+0x1e>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_write_r+0x1e>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	200002bc 	.word	0x200002bc

0800474c <__errno>:
 800474c:	4b01      	ldr	r3, [pc, #4]	@ (8004754 <__errno+0x8>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000018 	.word	0x20000018

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	2600      	movs	r6, #0
 800475c:	4d0c      	ldr	r5, [pc, #48]	@ (8004790 <__libc_init_array+0x38>)
 800475e:	4c0d      	ldr	r4, [pc, #52]	@ (8004794 <__libc_init_array+0x3c>)
 8004760:	1b64      	subs	r4, r4, r5
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	f000 fee4 	bl	8005534 <_init>
 800476c:	2600      	movs	r6, #0
 800476e:	4d0a      	ldr	r5, [pc, #40]	@ (8004798 <__libc_init_array+0x40>)
 8004770:	4c0a      	ldr	r4, [pc, #40]	@ (800479c <__libc_init_array+0x44>)
 8004772:	1b64      	subs	r4, r4, r5
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	08005aa0 	.word	0x08005aa0
 8004794:	08005aa0 	.word	0x08005aa0
 8004798:	08005aa0 	.word	0x08005aa0
 800479c:	08005aa4 	.word	0x08005aa4

080047a0 <__retarget_lock_init_recursive>:
 80047a0:	4770      	bx	lr

080047a2 <__retarget_lock_acquire_recursive>:
 80047a2:	4770      	bx	lr

080047a4 <__retarget_lock_release_recursive>:
 80047a4:	4770      	bx	lr
	...

080047a8 <_free_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4605      	mov	r5, r0
 80047ac:	2900      	cmp	r1, #0
 80047ae:	d040      	beq.n	8004832 <_free_r+0x8a>
 80047b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b4:	1f0c      	subs	r4, r1, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfb8      	it	lt
 80047ba:	18e4      	addlt	r4, r4, r3
 80047bc:	f000 f8de 	bl	800497c <__malloc_lock>
 80047c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <_free_r+0x8c>)
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	b933      	cbnz	r3, 80047d4 <_free_r+0x2c>
 80047c6:	6063      	str	r3, [r4, #4]
 80047c8:	6014      	str	r4, [r2, #0]
 80047ca:	4628      	mov	r0, r5
 80047cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047d0:	f000 b8da 	b.w	8004988 <__malloc_unlock>
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	d908      	bls.n	80047ea <_free_r+0x42>
 80047d8:	6820      	ldr	r0, [r4, #0]
 80047da:	1821      	adds	r1, r4, r0
 80047dc:	428b      	cmp	r3, r1
 80047de:	bf01      	itttt	eq
 80047e0:	6819      	ldreq	r1, [r3, #0]
 80047e2:	685b      	ldreq	r3, [r3, #4]
 80047e4:	1809      	addeq	r1, r1, r0
 80047e6:	6021      	streq	r1, [r4, #0]
 80047e8:	e7ed      	b.n	80047c6 <_free_r+0x1e>
 80047ea:	461a      	mov	r2, r3
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	b10b      	cbz	r3, 80047f4 <_free_r+0x4c>
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	d9fa      	bls.n	80047ea <_free_r+0x42>
 80047f4:	6811      	ldr	r1, [r2, #0]
 80047f6:	1850      	adds	r0, r2, r1
 80047f8:	42a0      	cmp	r0, r4
 80047fa:	d10b      	bne.n	8004814 <_free_r+0x6c>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	4401      	add	r1, r0
 8004800:	1850      	adds	r0, r2, r1
 8004802:	4283      	cmp	r3, r0
 8004804:	6011      	str	r1, [r2, #0]
 8004806:	d1e0      	bne.n	80047ca <_free_r+0x22>
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	4408      	add	r0, r1
 800480e:	6010      	str	r0, [r2, #0]
 8004810:	6053      	str	r3, [r2, #4]
 8004812:	e7da      	b.n	80047ca <_free_r+0x22>
 8004814:	d902      	bls.n	800481c <_free_r+0x74>
 8004816:	230c      	movs	r3, #12
 8004818:	602b      	str	r3, [r5, #0]
 800481a:	e7d6      	b.n	80047ca <_free_r+0x22>
 800481c:	6820      	ldr	r0, [r4, #0]
 800481e:	1821      	adds	r1, r4, r0
 8004820:	428b      	cmp	r3, r1
 8004822:	bf01      	itttt	eq
 8004824:	6819      	ldreq	r1, [r3, #0]
 8004826:	685b      	ldreq	r3, [r3, #4]
 8004828:	1809      	addeq	r1, r1, r0
 800482a:	6021      	streq	r1, [r4, #0]
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	6054      	str	r4, [r2, #4]
 8004830:	e7cb      	b.n	80047ca <_free_r+0x22>
 8004832:	bd38      	pop	{r3, r4, r5, pc}
 8004834:	200002c8 	.word	0x200002c8

08004838 <sbrk_aligned>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	4e0f      	ldr	r6, [pc, #60]	@ (8004878 <sbrk_aligned+0x40>)
 800483c:	460c      	mov	r4, r1
 800483e:	6831      	ldr	r1, [r6, #0]
 8004840:	4605      	mov	r5, r0
 8004842:	b911      	cbnz	r1, 800484a <sbrk_aligned+0x12>
 8004844:	f000 fe14 	bl	8005470 <_sbrk_r>
 8004848:	6030      	str	r0, [r6, #0]
 800484a:	4621      	mov	r1, r4
 800484c:	4628      	mov	r0, r5
 800484e:	f000 fe0f 	bl	8005470 <_sbrk_r>
 8004852:	1c43      	adds	r3, r0, #1
 8004854:	d103      	bne.n	800485e <sbrk_aligned+0x26>
 8004856:	f04f 34ff 	mov.w	r4, #4294967295
 800485a:	4620      	mov	r0, r4
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	1cc4      	adds	r4, r0, #3
 8004860:	f024 0403 	bic.w	r4, r4, #3
 8004864:	42a0      	cmp	r0, r4
 8004866:	d0f8      	beq.n	800485a <sbrk_aligned+0x22>
 8004868:	1a21      	subs	r1, r4, r0
 800486a:	4628      	mov	r0, r5
 800486c:	f000 fe00 	bl	8005470 <_sbrk_r>
 8004870:	3001      	adds	r0, #1
 8004872:	d1f2      	bne.n	800485a <sbrk_aligned+0x22>
 8004874:	e7ef      	b.n	8004856 <sbrk_aligned+0x1e>
 8004876:	bf00      	nop
 8004878:	200002c4 	.word	0x200002c4

0800487c <_malloc_r>:
 800487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004880:	1ccd      	adds	r5, r1, #3
 8004882:	f025 0503 	bic.w	r5, r5, #3
 8004886:	3508      	adds	r5, #8
 8004888:	2d0c      	cmp	r5, #12
 800488a:	bf38      	it	cc
 800488c:	250c      	movcc	r5, #12
 800488e:	2d00      	cmp	r5, #0
 8004890:	4606      	mov	r6, r0
 8004892:	db01      	blt.n	8004898 <_malloc_r+0x1c>
 8004894:	42a9      	cmp	r1, r5
 8004896:	d904      	bls.n	80048a2 <_malloc_r+0x26>
 8004898:	230c      	movs	r3, #12
 800489a:	6033      	str	r3, [r6, #0]
 800489c:	2000      	movs	r0, #0
 800489e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004978 <_malloc_r+0xfc>
 80048a6:	f000 f869 	bl	800497c <__malloc_lock>
 80048aa:	f8d8 3000 	ldr.w	r3, [r8]
 80048ae:	461c      	mov	r4, r3
 80048b0:	bb44      	cbnz	r4, 8004904 <_malloc_r+0x88>
 80048b2:	4629      	mov	r1, r5
 80048b4:	4630      	mov	r0, r6
 80048b6:	f7ff ffbf 	bl	8004838 <sbrk_aligned>
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	4604      	mov	r4, r0
 80048be:	d158      	bne.n	8004972 <_malloc_r+0xf6>
 80048c0:	f8d8 4000 	ldr.w	r4, [r8]
 80048c4:	4627      	mov	r7, r4
 80048c6:	2f00      	cmp	r7, #0
 80048c8:	d143      	bne.n	8004952 <_malloc_r+0xd6>
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d04b      	beq.n	8004966 <_malloc_r+0xea>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	4639      	mov	r1, r7
 80048d2:	4630      	mov	r0, r6
 80048d4:	eb04 0903 	add.w	r9, r4, r3
 80048d8:	f000 fdca 	bl	8005470 <_sbrk_r>
 80048dc:	4581      	cmp	r9, r0
 80048de:	d142      	bne.n	8004966 <_malloc_r+0xea>
 80048e0:	6821      	ldr	r1, [r4, #0]
 80048e2:	4630      	mov	r0, r6
 80048e4:	1a6d      	subs	r5, r5, r1
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7ff ffa6 	bl	8004838 <sbrk_aligned>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d03a      	beq.n	8004966 <_malloc_r+0xea>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	442b      	add	r3, r5
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	f8d8 3000 	ldr.w	r3, [r8]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	bb62      	cbnz	r2, 8004958 <_malloc_r+0xdc>
 80048fe:	f8c8 7000 	str.w	r7, [r8]
 8004902:	e00f      	b.n	8004924 <_malloc_r+0xa8>
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	1b52      	subs	r2, r2, r5
 8004908:	d420      	bmi.n	800494c <_malloc_r+0xd0>
 800490a:	2a0b      	cmp	r2, #11
 800490c:	d917      	bls.n	800493e <_malloc_r+0xc2>
 800490e:	1961      	adds	r1, r4, r5
 8004910:	42a3      	cmp	r3, r4
 8004912:	6025      	str	r5, [r4, #0]
 8004914:	bf18      	it	ne
 8004916:	6059      	strne	r1, [r3, #4]
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	bf08      	it	eq
 800491c:	f8c8 1000 	streq.w	r1, [r8]
 8004920:	5162      	str	r2, [r4, r5]
 8004922:	604b      	str	r3, [r1, #4]
 8004924:	4630      	mov	r0, r6
 8004926:	f000 f82f 	bl	8004988 <__malloc_unlock>
 800492a:	f104 000b 	add.w	r0, r4, #11
 800492e:	1d23      	adds	r3, r4, #4
 8004930:	f020 0007 	bic.w	r0, r0, #7
 8004934:	1ac2      	subs	r2, r0, r3
 8004936:	bf1c      	itt	ne
 8004938:	1a1b      	subne	r3, r3, r0
 800493a:	50a3      	strne	r3, [r4, r2]
 800493c:	e7af      	b.n	800489e <_malloc_r+0x22>
 800493e:	6862      	ldr	r2, [r4, #4]
 8004940:	42a3      	cmp	r3, r4
 8004942:	bf0c      	ite	eq
 8004944:	f8c8 2000 	streq.w	r2, [r8]
 8004948:	605a      	strne	r2, [r3, #4]
 800494a:	e7eb      	b.n	8004924 <_malloc_r+0xa8>
 800494c:	4623      	mov	r3, r4
 800494e:	6864      	ldr	r4, [r4, #4]
 8004950:	e7ae      	b.n	80048b0 <_malloc_r+0x34>
 8004952:	463c      	mov	r4, r7
 8004954:	687f      	ldr	r7, [r7, #4]
 8004956:	e7b6      	b.n	80048c6 <_malloc_r+0x4a>
 8004958:	461a      	mov	r2, r3
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	42a3      	cmp	r3, r4
 800495e:	d1fb      	bne.n	8004958 <_malloc_r+0xdc>
 8004960:	2300      	movs	r3, #0
 8004962:	6053      	str	r3, [r2, #4]
 8004964:	e7de      	b.n	8004924 <_malloc_r+0xa8>
 8004966:	230c      	movs	r3, #12
 8004968:	4630      	mov	r0, r6
 800496a:	6033      	str	r3, [r6, #0]
 800496c:	f000 f80c 	bl	8004988 <__malloc_unlock>
 8004970:	e794      	b.n	800489c <_malloc_r+0x20>
 8004972:	6005      	str	r5, [r0, #0]
 8004974:	e7d6      	b.n	8004924 <_malloc_r+0xa8>
 8004976:	bf00      	nop
 8004978:	200002c8 	.word	0x200002c8

0800497c <__malloc_lock>:
 800497c:	4801      	ldr	r0, [pc, #4]	@ (8004984 <__malloc_lock+0x8>)
 800497e:	f7ff bf10 	b.w	80047a2 <__retarget_lock_acquire_recursive>
 8004982:	bf00      	nop
 8004984:	200002c0 	.word	0x200002c0

08004988 <__malloc_unlock>:
 8004988:	4801      	ldr	r0, [pc, #4]	@ (8004990 <__malloc_unlock+0x8>)
 800498a:	f7ff bf0b 	b.w	80047a4 <__retarget_lock_release_recursive>
 800498e:	bf00      	nop
 8004990:	200002c0 	.word	0x200002c0

08004994 <__ssputs_r>:
 8004994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	461f      	mov	r7, r3
 800499a:	688e      	ldr	r6, [r1, #8]
 800499c:	4682      	mov	sl, r0
 800499e:	42be      	cmp	r6, r7
 80049a0:	460c      	mov	r4, r1
 80049a2:	4690      	mov	r8, r2
 80049a4:	680b      	ldr	r3, [r1, #0]
 80049a6:	d82d      	bhi.n	8004a04 <__ssputs_r+0x70>
 80049a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049b0:	d026      	beq.n	8004a00 <__ssputs_r+0x6c>
 80049b2:	6965      	ldr	r5, [r4, #20]
 80049b4:	6909      	ldr	r1, [r1, #16]
 80049b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049ba:	eba3 0901 	sub.w	r9, r3, r1
 80049be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049c2:	1c7b      	adds	r3, r7, #1
 80049c4:	444b      	add	r3, r9
 80049c6:	106d      	asrs	r5, r5, #1
 80049c8:	429d      	cmp	r5, r3
 80049ca:	bf38      	it	cc
 80049cc:	461d      	movcc	r5, r3
 80049ce:	0553      	lsls	r3, r2, #21
 80049d0:	d527      	bpl.n	8004a22 <__ssputs_r+0x8e>
 80049d2:	4629      	mov	r1, r5
 80049d4:	f7ff ff52 	bl	800487c <_malloc_r>
 80049d8:	4606      	mov	r6, r0
 80049da:	b360      	cbz	r0, 8004a36 <__ssputs_r+0xa2>
 80049dc:	464a      	mov	r2, r9
 80049de:	6921      	ldr	r1, [r4, #16]
 80049e0:	f000 fd64 	bl	80054ac <memcpy>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	6126      	str	r6, [r4, #16]
 80049f2:	444e      	add	r6, r9
 80049f4:	6026      	str	r6, [r4, #0]
 80049f6:	463e      	mov	r6, r7
 80049f8:	6165      	str	r5, [r4, #20]
 80049fa:	eba5 0509 	sub.w	r5, r5, r9
 80049fe:	60a5      	str	r5, [r4, #8]
 8004a00:	42be      	cmp	r6, r7
 8004a02:	d900      	bls.n	8004a06 <__ssputs_r+0x72>
 8004a04:	463e      	mov	r6, r7
 8004a06:	4632      	mov	r2, r6
 8004a08:	4641      	mov	r1, r8
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	f000 fcf3 	bl	80053f6 <memmove>
 8004a10:	2000      	movs	r0, #0
 8004a12:	68a3      	ldr	r3, [r4, #8]
 8004a14:	1b9b      	subs	r3, r3, r6
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	4433      	add	r3, r6
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a22:	462a      	mov	r2, r5
 8004a24:	f000 fd50 	bl	80054c8 <_realloc_r>
 8004a28:	4606      	mov	r6, r0
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d1e0      	bne.n	80049f0 <__ssputs_r+0x5c>
 8004a2e:	4650      	mov	r0, sl
 8004a30:	6921      	ldr	r1, [r4, #16]
 8004a32:	f7ff feb9 	bl	80047a8 <_free_r>
 8004a36:	230c      	movs	r3, #12
 8004a38:	f8ca 3000 	str.w	r3, [sl]
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	e7e9      	b.n	8004a1e <__ssputs_r+0x8a>
	...

08004a4c <_svfiprintf_r>:
 8004a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a50:	4698      	mov	r8, r3
 8004a52:	898b      	ldrh	r3, [r1, #12]
 8004a54:	4607      	mov	r7, r0
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	460d      	mov	r5, r1
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	b09d      	sub	sp, #116	@ 0x74
 8004a5e:	d510      	bpl.n	8004a82 <_svfiprintf_r+0x36>
 8004a60:	690b      	ldr	r3, [r1, #16]
 8004a62:	b973      	cbnz	r3, 8004a82 <_svfiprintf_r+0x36>
 8004a64:	2140      	movs	r1, #64	@ 0x40
 8004a66:	f7ff ff09 	bl	800487c <_malloc_r>
 8004a6a:	6028      	str	r0, [r5, #0]
 8004a6c:	6128      	str	r0, [r5, #16]
 8004a6e:	b930      	cbnz	r0, 8004a7e <_svfiprintf_r+0x32>
 8004a70:	230c      	movs	r3, #12
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	b01d      	add	sp, #116	@ 0x74
 8004a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7e:	2340      	movs	r3, #64	@ 0x40
 8004a80:	616b      	str	r3, [r5, #20]
 8004a82:	2300      	movs	r3, #0
 8004a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a86:	2320      	movs	r3, #32
 8004a88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a8c:	2330      	movs	r3, #48	@ 0x30
 8004a8e:	f04f 0901 	mov.w	r9, #1
 8004a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a96:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004c30 <_svfiprintf_r+0x1e4>
 8004a9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aa6:	b10a      	cbz	r2, 8004aac <_svfiprintf_r+0x60>
 8004aa8:	2a25      	cmp	r2, #37	@ 0x25
 8004aaa:	d1f9      	bne.n	8004aa0 <_svfiprintf_r+0x54>
 8004aac:	ebba 0b04 	subs.w	fp, sl, r4
 8004ab0:	d00b      	beq.n	8004aca <_svfiprintf_r+0x7e>
 8004ab2:	465b      	mov	r3, fp
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f7ff ff6b 	bl	8004994 <__ssputs_r>
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f000 80a7 	beq.w	8004c12 <_svfiprintf_r+0x1c6>
 8004ac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ac6:	445a      	add	r2, fp
 8004ac8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004aca:	f89a 3000 	ldrb.w	r3, [sl]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 809f 	beq.w	8004c12 <_svfiprintf_r+0x1c6>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ade:	f10a 0a01 	add.w	sl, sl, #1
 8004ae2:	9304      	str	r3, [sp, #16]
 8004ae4:	9307      	str	r3, [sp, #28]
 8004ae6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004aea:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aec:	4654      	mov	r4, sl
 8004aee:	2205      	movs	r2, #5
 8004af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af4:	484e      	ldr	r0, [pc, #312]	@ (8004c30 <_svfiprintf_r+0x1e4>)
 8004af6:	f000 fccb 	bl	8005490 <memchr>
 8004afa:	9a04      	ldr	r2, [sp, #16]
 8004afc:	b9d8      	cbnz	r0, 8004b36 <_svfiprintf_r+0xea>
 8004afe:	06d0      	lsls	r0, r2, #27
 8004b00:	bf44      	itt	mi
 8004b02:	2320      	movmi	r3, #32
 8004b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b08:	0711      	lsls	r1, r2, #28
 8004b0a:	bf44      	itt	mi
 8004b0c:	232b      	movmi	r3, #43	@ 0x2b
 8004b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b12:	f89a 3000 	ldrb.w	r3, [sl]
 8004b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b18:	d015      	beq.n	8004b46 <_svfiprintf_r+0xfa>
 8004b1a:	4654      	mov	r4, sl
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f04f 0c0a 	mov.w	ip, #10
 8004b22:	9a07      	ldr	r2, [sp, #28]
 8004b24:	4621      	mov	r1, r4
 8004b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b2a:	3b30      	subs	r3, #48	@ 0x30
 8004b2c:	2b09      	cmp	r3, #9
 8004b2e:	d94b      	bls.n	8004bc8 <_svfiprintf_r+0x17c>
 8004b30:	b1b0      	cbz	r0, 8004b60 <_svfiprintf_r+0x114>
 8004b32:	9207      	str	r2, [sp, #28]
 8004b34:	e014      	b.n	8004b60 <_svfiprintf_r+0x114>
 8004b36:	eba0 0308 	sub.w	r3, r0, r8
 8004b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	46a2      	mov	sl, r4
 8004b42:	9304      	str	r3, [sp, #16]
 8004b44:	e7d2      	b.n	8004aec <_svfiprintf_r+0xa0>
 8004b46:	9b03      	ldr	r3, [sp, #12]
 8004b48:	1d19      	adds	r1, r3, #4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	9103      	str	r1, [sp, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bfbb      	ittet	lt
 8004b52:	425b      	neglt	r3, r3
 8004b54:	f042 0202 	orrlt.w	r2, r2, #2
 8004b58:	9307      	strge	r3, [sp, #28]
 8004b5a:	9307      	strlt	r3, [sp, #28]
 8004b5c:	bfb8      	it	lt
 8004b5e:	9204      	strlt	r2, [sp, #16]
 8004b60:	7823      	ldrb	r3, [r4, #0]
 8004b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b64:	d10a      	bne.n	8004b7c <_svfiprintf_r+0x130>
 8004b66:	7863      	ldrb	r3, [r4, #1]
 8004b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b6a:	d132      	bne.n	8004bd2 <_svfiprintf_r+0x186>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	3402      	adds	r4, #2
 8004b70:	1d1a      	adds	r2, r3, #4
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	9203      	str	r2, [sp, #12]
 8004b76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004c34 <_svfiprintf_r+0x1e8>
 8004b80:	2203      	movs	r2, #3
 8004b82:	4650      	mov	r0, sl
 8004b84:	7821      	ldrb	r1, [r4, #0]
 8004b86:	f000 fc83 	bl	8005490 <memchr>
 8004b8a:	b138      	cbz	r0, 8004b9c <_svfiprintf_r+0x150>
 8004b8c:	2240      	movs	r2, #64	@ 0x40
 8004b8e:	9b04      	ldr	r3, [sp, #16]
 8004b90:	eba0 000a 	sub.w	r0, r0, sl
 8004b94:	4082      	lsls	r2, r0
 8004b96:	4313      	orrs	r3, r2
 8004b98:	3401      	adds	r4, #1
 8004b9a:	9304      	str	r3, [sp, #16]
 8004b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba0:	2206      	movs	r2, #6
 8004ba2:	4825      	ldr	r0, [pc, #148]	@ (8004c38 <_svfiprintf_r+0x1ec>)
 8004ba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ba8:	f000 fc72 	bl	8005490 <memchr>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d036      	beq.n	8004c1e <_svfiprintf_r+0x1d2>
 8004bb0:	4b22      	ldr	r3, [pc, #136]	@ (8004c3c <_svfiprintf_r+0x1f0>)
 8004bb2:	bb1b      	cbnz	r3, 8004bfc <_svfiprintf_r+0x1b0>
 8004bb4:	9b03      	ldr	r3, [sp, #12]
 8004bb6:	3307      	adds	r3, #7
 8004bb8:	f023 0307 	bic.w	r3, r3, #7
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	9303      	str	r3, [sp, #12]
 8004bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bc2:	4433      	add	r3, r6
 8004bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bc6:	e76a      	b.n	8004a9e <_svfiprintf_r+0x52>
 8004bc8:	460c      	mov	r4, r1
 8004bca:	2001      	movs	r0, #1
 8004bcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bd0:	e7a8      	b.n	8004b24 <_svfiprintf_r+0xd8>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f04f 0c0a 	mov.w	ip, #10
 8004bd8:	4619      	mov	r1, r3
 8004bda:	3401      	adds	r4, #1
 8004bdc:	9305      	str	r3, [sp, #20]
 8004bde:	4620      	mov	r0, r4
 8004be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be4:	3a30      	subs	r2, #48	@ 0x30
 8004be6:	2a09      	cmp	r2, #9
 8004be8:	d903      	bls.n	8004bf2 <_svfiprintf_r+0x1a6>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0c6      	beq.n	8004b7c <_svfiprintf_r+0x130>
 8004bee:	9105      	str	r1, [sp, #20]
 8004bf0:	e7c4      	b.n	8004b7c <_svfiprintf_r+0x130>
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bfa:	e7f0      	b.n	8004bde <_svfiprintf_r+0x192>
 8004bfc:	ab03      	add	r3, sp, #12
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	462a      	mov	r2, r5
 8004c02:	4638      	mov	r0, r7
 8004c04:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <_svfiprintf_r+0x1f4>)
 8004c06:	a904      	add	r1, sp, #16
 8004c08:	f3af 8000 	nop.w
 8004c0c:	1c42      	adds	r2, r0, #1
 8004c0e:	4606      	mov	r6, r0
 8004c10:	d1d6      	bne.n	8004bc0 <_svfiprintf_r+0x174>
 8004c12:	89ab      	ldrh	r3, [r5, #12]
 8004c14:	065b      	lsls	r3, r3, #25
 8004c16:	f53f af2d 	bmi.w	8004a74 <_svfiprintf_r+0x28>
 8004c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c1c:	e72c      	b.n	8004a78 <_svfiprintf_r+0x2c>
 8004c1e:	ab03      	add	r3, sp, #12
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	462a      	mov	r2, r5
 8004c24:	4638      	mov	r0, r7
 8004c26:	4b06      	ldr	r3, [pc, #24]	@ (8004c40 <_svfiprintf_r+0x1f4>)
 8004c28:	a904      	add	r1, sp, #16
 8004c2a:	f000 f9bd 	bl	8004fa8 <_printf_i>
 8004c2e:	e7ed      	b.n	8004c0c <_svfiprintf_r+0x1c0>
 8004c30:	08005a6a 	.word	0x08005a6a
 8004c34:	08005a70 	.word	0x08005a70
 8004c38:	08005a74 	.word	0x08005a74
 8004c3c:	00000000 	.word	0x00000000
 8004c40:	08004995 	.word	0x08004995

08004c44 <__sfputc_r>:
 8004c44:	6893      	ldr	r3, [r2, #8]
 8004c46:	b410      	push	{r4}
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	6093      	str	r3, [r2, #8]
 8004c4e:	da07      	bge.n	8004c60 <__sfputc_r+0x1c>
 8004c50:	6994      	ldr	r4, [r2, #24]
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	db01      	blt.n	8004c5a <__sfputc_r+0x16>
 8004c56:	290a      	cmp	r1, #10
 8004c58:	d102      	bne.n	8004c60 <__sfputc_r+0x1c>
 8004c5a:	bc10      	pop	{r4}
 8004c5c:	f7ff bc93 	b.w	8004586 <__swbuf_r>
 8004c60:	6813      	ldr	r3, [r2, #0]
 8004c62:	1c58      	adds	r0, r3, #1
 8004c64:	6010      	str	r0, [r2, #0]
 8004c66:	7019      	strb	r1, [r3, #0]
 8004c68:	4608      	mov	r0, r1
 8004c6a:	bc10      	pop	{r4}
 8004c6c:	4770      	bx	lr

08004c6e <__sfputs_r>:
 8004c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c70:	4606      	mov	r6, r0
 8004c72:	460f      	mov	r7, r1
 8004c74:	4614      	mov	r4, r2
 8004c76:	18d5      	adds	r5, r2, r3
 8004c78:	42ac      	cmp	r4, r5
 8004c7a:	d101      	bne.n	8004c80 <__sfputs_r+0x12>
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	e007      	b.n	8004c90 <__sfputs_r+0x22>
 8004c80:	463a      	mov	r2, r7
 8004c82:	4630      	mov	r0, r6
 8004c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c88:	f7ff ffdc 	bl	8004c44 <__sfputc_r>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d1f3      	bne.n	8004c78 <__sfputs_r+0xa>
 8004c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c94 <_vfiprintf_r>:
 8004c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	460d      	mov	r5, r1
 8004c9a:	4614      	mov	r4, r2
 8004c9c:	4698      	mov	r8, r3
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	b09d      	sub	sp, #116	@ 0x74
 8004ca2:	b118      	cbz	r0, 8004cac <_vfiprintf_r+0x18>
 8004ca4:	6a03      	ldr	r3, [r0, #32]
 8004ca6:	b90b      	cbnz	r3, 8004cac <_vfiprintf_r+0x18>
 8004ca8:	f7ff fb4e 	bl	8004348 <__sinit>
 8004cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cae:	07d9      	lsls	r1, r3, #31
 8004cb0:	d405      	bmi.n	8004cbe <_vfiprintf_r+0x2a>
 8004cb2:	89ab      	ldrh	r3, [r5, #12]
 8004cb4:	059a      	lsls	r2, r3, #22
 8004cb6:	d402      	bmi.n	8004cbe <_vfiprintf_r+0x2a>
 8004cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cba:	f7ff fd72 	bl	80047a2 <__retarget_lock_acquire_recursive>
 8004cbe:	89ab      	ldrh	r3, [r5, #12]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	d501      	bpl.n	8004cc8 <_vfiprintf_r+0x34>
 8004cc4:	692b      	ldr	r3, [r5, #16]
 8004cc6:	b99b      	cbnz	r3, 8004cf0 <_vfiprintf_r+0x5c>
 8004cc8:	4629      	mov	r1, r5
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f7ff fc9a 	bl	8004604 <__swsetup_r>
 8004cd0:	b170      	cbz	r0, 8004cf0 <_vfiprintf_r+0x5c>
 8004cd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cd4:	07dc      	lsls	r4, r3, #31
 8004cd6:	d504      	bpl.n	8004ce2 <_vfiprintf_r+0x4e>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	b01d      	add	sp, #116	@ 0x74
 8004cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce2:	89ab      	ldrh	r3, [r5, #12]
 8004ce4:	0598      	lsls	r0, r3, #22
 8004ce6:	d4f7      	bmi.n	8004cd8 <_vfiprintf_r+0x44>
 8004ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004cea:	f7ff fd5b 	bl	80047a4 <__retarget_lock_release_recursive>
 8004cee:	e7f3      	b.n	8004cd8 <_vfiprintf_r+0x44>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cfa:	2330      	movs	r3, #48	@ 0x30
 8004cfc:	f04f 0901 	mov.w	r9, #1
 8004d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004eb0 <_vfiprintf_r+0x21c>
 8004d08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d0c:	4623      	mov	r3, r4
 8004d0e:	469a      	mov	sl, r3
 8004d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d14:	b10a      	cbz	r2, 8004d1a <_vfiprintf_r+0x86>
 8004d16:	2a25      	cmp	r2, #37	@ 0x25
 8004d18:	d1f9      	bne.n	8004d0e <_vfiprintf_r+0x7a>
 8004d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8004d1e:	d00b      	beq.n	8004d38 <_vfiprintf_r+0xa4>
 8004d20:	465b      	mov	r3, fp
 8004d22:	4622      	mov	r2, r4
 8004d24:	4629      	mov	r1, r5
 8004d26:	4630      	mov	r0, r6
 8004d28:	f7ff ffa1 	bl	8004c6e <__sfputs_r>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f000 80a7 	beq.w	8004e80 <_vfiprintf_r+0x1ec>
 8004d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d34:	445a      	add	r2, fp
 8004d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d38:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 809f 	beq.w	8004e80 <_vfiprintf_r+0x1ec>
 8004d42:	2300      	movs	r3, #0
 8004d44:	f04f 32ff 	mov.w	r2, #4294967295
 8004d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d4c:	f10a 0a01 	add.w	sl, sl, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	9307      	str	r3, [sp, #28]
 8004d54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d5a:	4654      	mov	r4, sl
 8004d5c:	2205      	movs	r2, #5
 8004d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d62:	4853      	ldr	r0, [pc, #332]	@ (8004eb0 <_vfiprintf_r+0x21c>)
 8004d64:	f000 fb94 	bl	8005490 <memchr>
 8004d68:	9a04      	ldr	r2, [sp, #16]
 8004d6a:	b9d8      	cbnz	r0, 8004da4 <_vfiprintf_r+0x110>
 8004d6c:	06d1      	lsls	r1, r2, #27
 8004d6e:	bf44      	itt	mi
 8004d70:	2320      	movmi	r3, #32
 8004d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d76:	0713      	lsls	r3, r2, #28
 8004d78:	bf44      	itt	mi
 8004d7a:	232b      	movmi	r3, #43	@ 0x2b
 8004d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d80:	f89a 3000 	ldrb.w	r3, [sl]
 8004d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d86:	d015      	beq.n	8004db4 <_vfiprintf_r+0x120>
 8004d88:	4654      	mov	r4, sl
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f04f 0c0a 	mov.w	ip, #10
 8004d90:	9a07      	ldr	r2, [sp, #28]
 8004d92:	4621      	mov	r1, r4
 8004d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d98:	3b30      	subs	r3, #48	@ 0x30
 8004d9a:	2b09      	cmp	r3, #9
 8004d9c:	d94b      	bls.n	8004e36 <_vfiprintf_r+0x1a2>
 8004d9e:	b1b0      	cbz	r0, 8004dce <_vfiprintf_r+0x13a>
 8004da0:	9207      	str	r2, [sp, #28]
 8004da2:	e014      	b.n	8004dce <_vfiprintf_r+0x13a>
 8004da4:	eba0 0308 	sub.w	r3, r0, r8
 8004da8:	fa09 f303 	lsl.w	r3, r9, r3
 8004dac:	4313      	orrs	r3, r2
 8004dae:	46a2      	mov	sl, r4
 8004db0:	9304      	str	r3, [sp, #16]
 8004db2:	e7d2      	b.n	8004d5a <_vfiprintf_r+0xc6>
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	9103      	str	r1, [sp, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bfbb      	ittet	lt
 8004dc0:	425b      	neglt	r3, r3
 8004dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8004dc6:	9307      	strge	r3, [sp, #28]
 8004dc8:	9307      	strlt	r3, [sp, #28]
 8004dca:	bfb8      	it	lt
 8004dcc:	9204      	strlt	r2, [sp, #16]
 8004dce:	7823      	ldrb	r3, [r4, #0]
 8004dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dd2:	d10a      	bne.n	8004dea <_vfiprintf_r+0x156>
 8004dd4:	7863      	ldrb	r3, [r4, #1]
 8004dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dd8:	d132      	bne.n	8004e40 <_vfiprintf_r+0x1ac>
 8004dda:	9b03      	ldr	r3, [sp, #12]
 8004ddc:	3402      	adds	r4, #2
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	9203      	str	r2, [sp, #12]
 8004de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004de8:	9305      	str	r3, [sp, #20]
 8004dea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004eb4 <_vfiprintf_r+0x220>
 8004dee:	2203      	movs	r2, #3
 8004df0:	4650      	mov	r0, sl
 8004df2:	7821      	ldrb	r1, [r4, #0]
 8004df4:	f000 fb4c 	bl	8005490 <memchr>
 8004df8:	b138      	cbz	r0, 8004e0a <_vfiprintf_r+0x176>
 8004dfa:	2240      	movs	r2, #64	@ 0x40
 8004dfc:	9b04      	ldr	r3, [sp, #16]
 8004dfe:	eba0 000a 	sub.w	r0, r0, sl
 8004e02:	4082      	lsls	r2, r0
 8004e04:	4313      	orrs	r3, r2
 8004e06:	3401      	adds	r4, #1
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0e:	2206      	movs	r2, #6
 8004e10:	4829      	ldr	r0, [pc, #164]	@ (8004eb8 <_vfiprintf_r+0x224>)
 8004e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e16:	f000 fb3b 	bl	8005490 <memchr>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d03f      	beq.n	8004e9e <_vfiprintf_r+0x20a>
 8004e1e:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <_vfiprintf_r+0x228>)
 8004e20:	bb1b      	cbnz	r3, 8004e6a <_vfiprintf_r+0x1d6>
 8004e22:	9b03      	ldr	r3, [sp, #12]
 8004e24:	3307      	adds	r3, #7
 8004e26:	f023 0307 	bic.w	r3, r3, #7
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e30:	443b      	add	r3, r7
 8004e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e34:	e76a      	b.n	8004d0c <_vfiprintf_r+0x78>
 8004e36:	460c      	mov	r4, r1
 8004e38:	2001      	movs	r0, #1
 8004e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e3e:	e7a8      	b.n	8004d92 <_vfiprintf_r+0xfe>
 8004e40:	2300      	movs	r3, #0
 8004e42:	f04f 0c0a 	mov.w	ip, #10
 8004e46:	4619      	mov	r1, r3
 8004e48:	3401      	adds	r4, #1
 8004e4a:	9305      	str	r3, [sp, #20]
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e52:	3a30      	subs	r2, #48	@ 0x30
 8004e54:	2a09      	cmp	r2, #9
 8004e56:	d903      	bls.n	8004e60 <_vfiprintf_r+0x1cc>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0c6      	beq.n	8004dea <_vfiprintf_r+0x156>
 8004e5c:	9105      	str	r1, [sp, #20]
 8004e5e:	e7c4      	b.n	8004dea <_vfiprintf_r+0x156>
 8004e60:	4604      	mov	r4, r0
 8004e62:	2301      	movs	r3, #1
 8004e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e68:	e7f0      	b.n	8004e4c <_vfiprintf_r+0x1b8>
 8004e6a:	ab03      	add	r3, sp, #12
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	462a      	mov	r2, r5
 8004e70:	4630      	mov	r0, r6
 8004e72:	4b13      	ldr	r3, [pc, #76]	@ (8004ec0 <_vfiprintf_r+0x22c>)
 8004e74:	a904      	add	r1, sp, #16
 8004e76:	f3af 8000 	nop.w
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	1c78      	adds	r0, r7, #1
 8004e7e:	d1d6      	bne.n	8004e2e <_vfiprintf_r+0x19a>
 8004e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e82:	07d9      	lsls	r1, r3, #31
 8004e84:	d405      	bmi.n	8004e92 <_vfiprintf_r+0x1fe>
 8004e86:	89ab      	ldrh	r3, [r5, #12]
 8004e88:	059a      	lsls	r2, r3, #22
 8004e8a:	d402      	bmi.n	8004e92 <_vfiprintf_r+0x1fe>
 8004e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e8e:	f7ff fc89 	bl	80047a4 <__retarget_lock_release_recursive>
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	065b      	lsls	r3, r3, #25
 8004e96:	f53f af1f 	bmi.w	8004cd8 <_vfiprintf_r+0x44>
 8004e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e9c:	e71e      	b.n	8004cdc <_vfiprintf_r+0x48>
 8004e9e:	ab03      	add	r3, sp, #12
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	462a      	mov	r2, r5
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <_vfiprintf_r+0x22c>)
 8004ea8:	a904      	add	r1, sp, #16
 8004eaa:	f000 f87d 	bl	8004fa8 <_printf_i>
 8004eae:	e7e4      	b.n	8004e7a <_vfiprintf_r+0x1e6>
 8004eb0:	08005a6a 	.word	0x08005a6a
 8004eb4:	08005a70 	.word	0x08005a70
 8004eb8:	08005a74 	.word	0x08005a74
 8004ebc:	00000000 	.word	0x00000000
 8004ec0:	08004c6f 	.word	0x08004c6f

08004ec4 <_printf_common>:
 8004ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec8:	4616      	mov	r6, r2
 8004eca:	4698      	mov	r8, r3
 8004ecc:	688a      	ldr	r2, [r1, #8]
 8004ece:	690b      	ldr	r3, [r1, #16]
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	bfb8      	it	lt
 8004ed6:	4613      	movlt	r3, r2
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ede:	460c      	mov	r4, r1
 8004ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ee4:	b10a      	cbz	r2, 8004eea <_printf_common+0x26>
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	6033      	str	r3, [r6, #0]
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	0699      	lsls	r1, r3, #26
 8004eee:	bf42      	ittt	mi
 8004ef0:	6833      	ldrmi	r3, [r6, #0]
 8004ef2:	3302      	addmi	r3, #2
 8004ef4:	6033      	strmi	r3, [r6, #0]
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	f015 0506 	ands.w	r5, r5, #6
 8004efc:	d106      	bne.n	8004f0c <_printf_common+0x48>
 8004efe:	f104 0a19 	add.w	sl, r4, #25
 8004f02:	68e3      	ldr	r3, [r4, #12]
 8004f04:	6832      	ldr	r2, [r6, #0]
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	42ab      	cmp	r3, r5
 8004f0a:	dc2b      	bgt.n	8004f64 <_printf_common+0xa0>
 8004f0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	3b00      	subs	r3, #0
 8004f14:	bf18      	it	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	0692      	lsls	r2, r2, #26
 8004f1a:	d430      	bmi.n	8004f7e <_printf_common+0xba>
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	4638      	mov	r0, r7
 8004f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f24:	47c8      	blx	r9
 8004f26:	3001      	adds	r0, #1
 8004f28:	d023      	beq.n	8004f72 <_printf_common+0xae>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	6922      	ldr	r2, [r4, #16]
 8004f2e:	f003 0306 	and.w	r3, r3, #6
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	bf14      	ite	ne
 8004f36:	2500      	movne	r5, #0
 8004f38:	6833      	ldreq	r3, [r6, #0]
 8004f3a:	f04f 0600 	mov.w	r6, #0
 8004f3e:	bf08      	it	eq
 8004f40:	68e5      	ldreq	r5, [r4, #12]
 8004f42:	f104 041a 	add.w	r4, r4, #26
 8004f46:	bf08      	it	eq
 8004f48:	1aed      	subeq	r5, r5, r3
 8004f4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f4e:	bf08      	it	eq
 8004f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f54:	4293      	cmp	r3, r2
 8004f56:	bfc4      	itt	gt
 8004f58:	1a9b      	subgt	r3, r3, r2
 8004f5a:	18ed      	addgt	r5, r5, r3
 8004f5c:	42b5      	cmp	r5, r6
 8004f5e:	d11a      	bne.n	8004f96 <_printf_common+0xd2>
 8004f60:	2000      	movs	r0, #0
 8004f62:	e008      	b.n	8004f76 <_printf_common+0xb2>
 8004f64:	2301      	movs	r3, #1
 8004f66:	4652      	mov	r2, sl
 8004f68:	4641      	mov	r1, r8
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	47c8      	blx	r9
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d103      	bne.n	8004f7a <_printf_common+0xb6>
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7a:	3501      	adds	r5, #1
 8004f7c:	e7c1      	b.n	8004f02 <_printf_common+0x3e>
 8004f7e:	2030      	movs	r0, #48	@ 0x30
 8004f80:	18e1      	adds	r1, r4, r3
 8004f82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f8c:	4422      	add	r2, r4
 8004f8e:	3302      	adds	r3, #2
 8004f90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f94:	e7c2      	b.n	8004f1c <_printf_common+0x58>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4622      	mov	r2, r4
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	47c8      	blx	r9
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d0e6      	beq.n	8004f72 <_printf_common+0xae>
 8004fa4:	3601      	adds	r6, #1
 8004fa6:	e7d9      	b.n	8004f5c <_printf_common+0x98>

08004fa8 <_printf_i>:
 8004fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fac:	7e0f      	ldrb	r7, [r1, #24]
 8004fae:	4691      	mov	r9, r2
 8004fb0:	2f78      	cmp	r7, #120	@ 0x78
 8004fb2:	4680      	mov	r8, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	469a      	mov	sl, r3
 8004fb8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fbe:	d807      	bhi.n	8004fd0 <_printf_i+0x28>
 8004fc0:	2f62      	cmp	r7, #98	@ 0x62
 8004fc2:	d80a      	bhi.n	8004fda <_printf_i+0x32>
 8004fc4:	2f00      	cmp	r7, #0
 8004fc6:	f000 80d1 	beq.w	800516c <_printf_i+0x1c4>
 8004fca:	2f58      	cmp	r7, #88	@ 0x58
 8004fcc:	f000 80b8 	beq.w	8005140 <_printf_i+0x198>
 8004fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fd8:	e03a      	b.n	8005050 <_printf_i+0xa8>
 8004fda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fde:	2b15      	cmp	r3, #21
 8004fe0:	d8f6      	bhi.n	8004fd0 <_printf_i+0x28>
 8004fe2:	a101      	add	r1, pc, #4	@ (adr r1, 8004fe8 <_printf_i+0x40>)
 8004fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fe8:	08005041 	.word	0x08005041
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	08004fd1 	.word	0x08004fd1
 8004ff4:	08004fd1 	.word	0x08004fd1
 8004ff8:	08004fd1 	.word	0x08004fd1
 8004ffc:	08004fd1 	.word	0x08004fd1
 8005000:	08005055 	.word	0x08005055
 8005004:	08004fd1 	.word	0x08004fd1
 8005008:	08004fd1 	.word	0x08004fd1
 800500c:	08004fd1 	.word	0x08004fd1
 8005010:	08004fd1 	.word	0x08004fd1
 8005014:	08005153 	.word	0x08005153
 8005018:	0800507f 	.word	0x0800507f
 800501c:	0800510d 	.word	0x0800510d
 8005020:	08004fd1 	.word	0x08004fd1
 8005024:	08004fd1 	.word	0x08004fd1
 8005028:	08005175 	.word	0x08005175
 800502c:	08004fd1 	.word	0x08004fd1
 8005030:	0800507f 	.word	0x0800507f
 8005034:	08004fd1 	.word	0x08004fd1
 8005038:	08004fd1 	.word	0x08004fd1
 800503c:	08005115 	.word	0x08005115
 8005040:	6833      	ldr	r3, [r6, #0]
 8005042:	1d1a      	adds	r2, r3, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6032      	str	r2, [r6, #0]
 8005048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800504c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005050:	2301      	movs	r3, #1
 8005052:	e09c      	b.n	800518e <_printf_i+0x1e6>
 8005054:	6833      	ldr	r3, [r6, #0]
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	6031      	str	r1, [r6, #0]
 800505c:	0606      	lsls	r6, r0, #24
 800505e:	d501      	bpl.n	8005064 <_printf_i+0xbc>
 8005060:	681d      	ldr	r5, [r3, #0]
 8005062:	e003      	b.n	800506c <_printf_i+0xc4>
 8005064:	0645      	lsls	r5, r0, #25
 8005066:	d5fb      	bpl.n	8005060 <_printf_i+0xb8>
 8005068:	f9b3 5000 	ldrsh.w	r5, [r3]
 800506c:	2d00      	cmp	r5, #0
 800506e:	da03      	bge.n	8005078 <_printf_i+0xd0>
 8005070:	232d      	movs	r3, #45	@ 0x2d
 8005072:	426d      	negs	r5, r5
 8005074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005078:	230a      	movs	r3, #10
 800507a:	4858      	ldr	r0, [pc, #352]	@ (80051dc <_printf_i+0x234>)
 800507c:	e011      	b.n	80050a2 <_printf_i+0xfa>
 800507e:	6821      	ldr	r1, [r4, #0]
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	0608      	lsls	r0, r1, #24
 8005084:	f853 5b04 	ldr.w	r5, [r3], #4
 8005088:	d402      	bmi.n	8005090 <_printf_i+0xe8>
 800508a:	0649      	lsls	r1, r1, #25
 800508c:	bf48      	it	mi
 800508e:	b2ad      	uxthmi	r5, r5
 8005090:	2f6f      	cmp	r7, #111	@ 0x6f
 8005092:	6033      	str	r3, [r6, #0]
 8005094:	bf14      	ite	ne
 8005096:	230a      	movne	r3, #10
 8005098:	2308      	moveq	r3, #8
 800509a:	4850      	ldr	r0, [pc, #320]	@ (80051dc <_printf_i+0x234>)
 800509c:	2100      	movs	r1, #0
 800509e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050a2:	6866      	ldr	r6, [r4, #4]
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	60a6      	str	r6, [r4, #8]
 80050a8:	db05      	blt.n	80050b6 <_printf_i+0x10e>
 80050aa:	6821      	ldr	r1, [r4, #0]
 80050ac:	432e      	orrs	r6, r5
 80050ae:	f021 0104 	bic.w	r1, r1, #4
 80050b2:	6021      	str	r1, [r4, #0]
 80050b4:	d04b      	beq.n	800514e <_printf_i+0x1a6>
 80050b6:	4616      	mov	r6, r2
 80050b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80050bc:	fb03 5711 	mls	r7, r3, r1, r5
 80050c0:	5dc7      	ldrb	r7, [r0, r7]
 80050c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050c6:	462f      	mov	r7, r5
 80050c8:	42bb      	cmp	r3, r7
 80050ca:	460d      	mov	r5, r1
 80050cc:	d9f4      	bls.n	80050b8 <_printf_i+0x110>
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d10b      	bne.n	80050ea <_printf_i+0x142>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	07df      	lsls	r7, r3, #31
 80050d6:	d508      	bpl.n	80050ea <_printf_i+0x142>
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	6861      	ldr	r1, [r4, #4]
 80050dc:	4299      	cmp	r1, r3
 80050de:	bfde      	ittt	le
 80050e0:	2330      	movle	r3, #48	@ 0x30
 80050e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ea:	1b92      	subs	r2, r2, r6
 80050ec:	6122      	str	r2, [r4, #16]
 80050ee:	464b      	mov	r3, r9
 80050f0:	4621      	mov	r1, r4
 80050f2:	4640      	mov	r0, r8
 80050f4:	f8cd a000 	str.w	sl, [sp]
 80050f8:	aa03      	add	r2, sp, #12
 80050fa:	f7ff fee3 	bl	8004ec4 <_printf_common>
 80050fe:	3001      	adds	r0, #1
 8005100:	d14a      	bne.n	8005198 <_printf_i+0x1f0>
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	b004      	add	sp, #16
 8005108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	f043 0320 	orr.w	r3, r3, #32
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	2778      	movs	r7, #120	@ 0x78
 8005116:	4832      	ldr	r0, [pc, #200]	@ (80051e0 <_printf_i+0x238>)
 8005118:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	6831      	ldr	r1, [r6, #0]
 8005120:	061f      	lsls	r7, r3, #24
 8005122:	f851 5b04 	ldr.w	r5, [r1], #4
 8005126:	d402      	bmi.n	800512e <_printf_i+0x186>
 8005128:	065f      	lsls	r7, r3, #25
 800512a:	bf48      	it	mi
 800512c:	b2ad      	uxthmi	r5, r5
 800512e:	6031      	str	r1, [r6, #0]
 8005130:	07d9      	lsls	r1, r3, #31
 8005132:	bf44      	itt	mi
 8005134:	f043 0320 	orrmi.w	r3, r3, #32
 8005138:	6023      	strmi	r3, [r4, #0]
 800513a:	b11d      	cbz	r5, 8005144 <_printf_i+0x19c>
 800513c:	2310      	movs	r3, #16
 800513e:	e7ad      	b.n	800509c <_printf_i+0xf4>
 8005140:	4826      	ldr	r0, [pc, #152]	@ (80051dc <_printf_i+0x234>)
 8005142:	e7e9      	b.n	8005118 <_printf_i+0x170>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	f023 0320 	bic.w	r3, r3, #32
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	e7f6      	b.n	800513c <_printf_i+0x194>
 800514e:	4616      	mov	r6, r2
 8005150:	e7bd      	b.n	80050ce <_printf_i+0x126>
 8005152:	6833      	ldr	r3, [r6, #0]
 8005154:	6825      	ldr	r5, [r4, #0]
 8005156:	1d18      	adds	r0, r3, #4
 8005158:	6961      	ldr	r1, [r4, #20]
 800515a:	6030      	str	r0, [r6, #0]
 800515c:	062e      	lsls	r6, r5, #24
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	d501      	bpl.n	8005166 <_printf_i+0x1be>
 8005162:	6019      	str	r1, [r3, #0]
 8005164:	e002      	b.n	800516c <_printf_i+0x1c4>
 8005166:	0668      	lsls	r0, r5, #25
 8005168:	d5fb      	bpl.n	8005162 <_printf_i+0x1ba>
 800516a:	8019      	strh	r1, [r3, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	4616      	mov	r6, r2
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	e7bc      	b.n	80050ee <_printf_i+0x146>
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	2100      	movs	r1, #0
 8005178:	1d1a      	adds	r2, r3, #4
 800517a:	6032      	str	r2, [r6, #0]
 800517c:	681e      	ldr	r6, [r3, #0]
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	4630      	mov	r0, r6
 8005182:	f000 f985 	bl	8005490 <memchr>
 8005186:	b108      	cbz	r0, 800518c <_printf_i+0x1e4>
 8005188:	1b80      	subs	r0, r0, r6
 800518a:	6060      	str	r0, [r4, #4]
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	6123      	str	r3, [r4, #16]
 8005190:	2300      	movs	r3, #0
 8005192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005196:	e7aa      	b.n	80050ee <_printf_i+0x146>
 8005198:	4632      	mov	r2, r6
 800519a:	4649      	mov	r1, r9
 800519c:	4640      	mov	r0, r8
 800519e:	6923      	ldr	r3, [r4, #16]
 80051a0:	47d0      	blx	sl
 80051a2:	3001      	adds	r0, #1
 80051a4:	d0ad      	beq.n	8005102 <_printf_i+0x15a>
 80051a6:	6823      	ldr	r3, [r4, #0]
 80051a8:	079b      	lsls	r3, r3, #30
 80051aa:	d413      	bmi.n	80051d4 <_printf_i+0x22c>
 80051ac:	68e0      	ldr	r0, [r4, #12]
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	4298      	cmp	r0, r3
 80051b2:	bfb8      	it	lt
 80051b4:	4618      	movlt	r0, r3
 80051b6:	e7a6      	b.n	8005106 <_printf_i+0x15e>
 80051b8:	2301      	movs	r3, #1
 80051ba:	4632      	mov	r2, r6
 80051bc:	4649      	mov	r1, r9
 80051be:	4640      	mov	r0, r8
 80051c0:	47d0      	blx	sl
 80051c2:	3001      	adds	r0, #1
 80051c4:	d09d      	beq.n	8005102 <_printf_i+0x15a>
 80051c6:	3501      	adds	r5, #1
 80051c8:	68e3      	ldr	r3, [r4, #12]
 80051ca:	9903      	ldr	r1, [sp, #12]
 80051cc:	1a5b      	subs	r3, r3, r1
 80051ce:	42ab      	cmp	r3, r5
 80051d0:	dcf2      	bgt.n	80051b8 <_printf_i+0x210>
 80051d2:	e7eb      	b.n	80051ac <_printf_i+0x204>
 80051d4:	2500      	movs	r5, #0
 80051d6:	f104 0619 	add.w	r6, r4, #25
 80051da:	e7f5      	b.n	80051c8 <_printf_i+0x220>
 80051dc:	08005a7b 	.word	0x08005a7b
 80051e0:	08005a8c 	.word	0x08005a8c

080051e4 <__sflush_r>:
 80051e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	0716      	lsls	r6, r2, #28
 80051ec:	4605      	mov	r5, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	d454      	bmi.n	800529c <__sflush_r+0xb8>
 80051f2:	684b      	ldr	r3, [r1, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dc02      	bgt.n	80051fe <__sflush_r+0x1a>
 80051f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dd48      	ble.n	8005290 <__sflush_r+0xac>
 80051fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005200:	2e00      	cmp	r6, #0
 8005202:	d045      	beq.n	8005290 <__sflush_r+0xac>
 8005204:	2300      	movs	r3, #0
 8005206:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800520a:	682f      	ldr	r7, [r5, #0]
 800520c:	6a21      	ldr	r1, [r4, #32]
 800520e:	602b      	str	r3, [r5, #0]
 8005210:	d030      	beq.n	8005274 <__sflush_r+0x90>
 8005212:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	0759      	lsls	r1, r3, #29
 8005218:	d505      	bpl.n	8005226 <__sflush_r+0x42>
 800521a:	6863      	ldr	r3, [r4, #4]
 800521c:	1ad2      	subs	r2, r2, r3
 800521e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005220:	b10b      	cbz	r3, 8005226 <__sflush_r+0x42>
 8005222:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005224:	1ad2      	subs	r2, r2, r3
 8005226:	2300      	movs	r3, #0
 8005228:	4628      	mov	r0, r5
 800522a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800522c:	6a21      	ldr	r1, [r4, #32]
 800522e:	47b0      	blx	r6
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	d106      	bne.n	8005244 <__sflush_r+0x60>
 8005236:	6829      	ldr	r1, [r5, #0]
 8005238:	291d      	cmp	r1, #29
 800523a:	d82b      	bhi.n	8005294 <__sflush_r+0xb0>
 800523c:	4a28      	ldr	r2, [pc, #160]	@ (80052e0 <__sflush_r+0xfc>)
 800523e:	40ca      	lsrs	r2, r1
 8005240:	07d6      	lsls	r6, r2, #31
 8005242:	d527      	bpl.n	8005294 <__sflush_r+0xb0>
 8005244:	2200      	movs	r2, #0
 8005246:	6062      	str	r2, [r4, #4]
 8005248:	6922      	ldr	r2, [r4, #16]
 800524a:	04d9      	lsls	r1, r3, #19
 800524c:	6022      	str	r2, [r4, #0]
 800524e:	d504      	bpl.n	800525a <__sflush_r+0x76>
 8005250:	1c42      	adds	r2, r0, #1
 8005252:	d101      	bne.n	8005258 <__sflush_r+0x74>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b903      	cbnz	r3, 800525a <__sflush_r+0x76>
 8005258:	6560      	str	r0, [r4, #84]	@ 0x54
 800525a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800525c:	602f      	str	r7, [r5, #0]
 800525e:	b1b9      	cbz	r1, 8005290 <__sflush_r+0xac>
 8005260:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005264:	4299      	cmp	r1, r3
 8005266:	d002      	beq.n	800526e <__sflush_r+0x8a>
 8005268:	4628      	mov	r0, r5
 800526a:	f7ff fa9d 	bl	80047a8 <_free_r>
 800526e:	2300      	movs	r3, #0
 8005270:	6363      	str	r3, [r4, #52]	@ 0x34
 8005272:	e00d      	b.n	8005290 <__sflush_r+0xac>
 8005274:	2301      	movs	r3, #1
 8005276:	4628      	mov	r0, r5
 8005278:	47b0      	blx	r6
 800527a:	4602      	mov	r2, r0
 800527c:	1c50      	adds	r0, r2, #1
 800527e:	d1c9      	bne.n	8005214 <__sflush_r+0x30>
 8005280:	682b      	ldr	r3, [r5, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0c6      	beq.n	8005214 <__sflush_r+0x30>
 8005286:	2b1d      	cmp	r3, #29
 8005288:	d001      	beq.n	800528e <__sflush_r+0xaa>
 800528a:	2b16      	cmp	r3, #22
 800528c:	d11d      	bne.n	80052ca <__sflush_r+0xe6>
 800528e:	602f      	str	r7, [r5, #0]
 8005290:	2000      	movs	r0, #0
 8005292:	e021      	b.n	80052d8 <__sflush_r+0xf4>
 8005294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005298:	b21b      	sxth	r3, r3
 800529a:	e01a      	b.n	80052d2 <__sflush_r+0xee>
 800529c:	690f      	ldr	r7, [r1, #16]
 800529e:	2f00      	cmp	r7, #0
 80052a0:	d0f6      	beq.n	8005290 <__sflush_r+0xac>
 80052a2:	0793      	lsls	r3, r2, #30
 80052a4:	bf18      	it	ne
 80052a6:	2300      	movne	r3, #0
 80052a8:	680e      	ldr	r6, [r1, #0]
 80052aa:	bf08      	it	eq
 80052ac:	694b      	ldreq	r3, [r1, #20]
 80052ae:	1bf6      	subs	r6, r6, r7
 80052b0:	600f      	str	r7, [r1, #0]
 80052b2:	608b      	str	r3, [r1, #8]
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	ddeb      	ble.n	8005290 <__sflush_r+0xac>
 80052b8:	4633      	mov	r3, r6
 80052ba:	463a      	mov	r2, r7
 80052bc:	4628      	mov	r0, r5
 80052be:	6a21      	ldr	r1, [r4, #32]
 80052c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80052c4:	47e0      	blx	ip
 80052c6:	2800      	cmp	r0, #0
 80052c8:	dc07      	bgt.n	80052da <__sflush_r+0xf6>
 80052ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052d2:	f04f 30ff 	mov.w	r0, #4294967295
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052da:	4407      	add	r7, r0
 80052dc:	1a36      	subs	r6, r6, r0
 80052de:	e7e9      	b.n	80052b4 <__sflush_r+0xd0>
 80052e0:	20400001 	.word	0x20400001

080052e4 <_fflush_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	690b      	ldr	r3, [r1, #16]
 80052e8:	4605      	mov	r5, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	b913      	cbnz	r3, 80052f4 <_fflush_r+0x10>
 80052ee:	2500      	movs	r5, #0
 80052f0:	4628      	mov	r0, r5
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	b118      	cbz	r0, 80052fe <_fflush_r+0x1a>
 80052f6:	6a03      	ldr	r3, [r0, #32]
 80052f8:	b90b      	cbnz	r3, 80052fe <_fflush_r+0x1a>
 80052fa:	f7ff f825 	bl	8004348 <__sinit>
 80052fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f3      	beq.n	80052ee <_fflush_r+0xa>
 8005306:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005308:	07d0      	lsls	r0, r2, #31
 800530a:	d404      	bmi.n	8005316 <_fflush_r+0x32>
 800530c:	0599      	lsls	r1, r3, #22
 800530e:	d402      	bmi.n	8005316 <_fflush_r+0x32>
 8005310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005312:	f7ff fa46 	bl	80047a2 <__retarget_lock_acquire_recursive>
 8005316:	4628      	mov	r0, r5
 8005318:	4621      	mov	r1, r4
 800531a:	f7ff ff63 	bl	80051e4 <__sflush_r>
 800531e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005320:	4605      	mov	r5, r0
 8005322:	07da      	lsls	r2, r3, #31
 8005324:	d4e4      	bmi.n	80052f0 <_fflush_r+0xc>
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	059b      	lsls	r3, r3, #22
 800532a:	d4e1      	bmi.n	80052f0 <_fflush_r+0xc>
 800532c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800532e:	f7ff fa39 	bl	80047a4 <__retarget_lock_release_recursive>
 8005332:	e7dd      	b.n	80052f0 <_fflush_r+0xc>

08005334 <__swhatbuf_r>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	460c      	mov	r4, r1
 8005338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533c:	4615      	mov	r5, r2
 800533e:	2900      	cmp	r1, #0
 8005340:	461e      	mov	r6, r3
 8005342:	b096      	sub	sp, #88	@ 0x58
 8005344:	da0c      	bge.n	8005360 <__swhatbuf_r+0x2c>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	2100      	movs	r1, #0
 800534a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800534e:	bf14      	ite	ne
 8005350:	2340      	movne	r3, #64	@ 0x40
 8005352:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005356:	2000      	movs	r0, #0
 8005358:	6031      	str	r1, [r6, #0]
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	b016      	add	sp, #88	@ 0x58
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	466a      	mov	r2, sp
 8005362:	f000 f863 	bl	800542c <_fstat_r>
 8005366:	2800      	cmp	r0, #0
 8005368:	dbed      	blt.n	8005346 <__swhatbuf_r+0x12>
 800536a:	9901      	ldr	r1, [sp, #4]
 800536c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005370:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005374:	4259      	negs	r1, r3
 8005376:	4159      	adcs	r1, r3
 8005378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800537c:	e7eb      	b.n	8005356 <__swhatbuf_r+0x22>

0800537e <__smakebuf_r>:
 800537e:	898b      	ldrh	r3, [r1, #12]
 8005380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005382:	079d      	lsls	r5, r3, #30
 8005384:	4606      	mov	r6, r0
 8005386:	460c      	mov	r4, r1
 8005388:	d507      	bpl.n	800539a <__smakebuf_r+0x1c>
 800538a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800538e:	6023      	str	r3, [r4, #0]
 8005390:	6123      	str	r3, [r4, #16]
 8005392:	2301      	movs	r3, #1
 8005394:	6163      	str	r3, [r4, #20]
 8005396:	b003      	add	sp, #12
 8005398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800539a:	466a      	mov	r2, sp
 800539c:	ab01      	add	r3, sp, #4
 800539e:	f7ff ffc9 	bl	8005334 <__swhatbuf_r>
 80053a2:	9f00      	ldr	r7, [sp, #0]
 80053a4:	4605      	mov	r5, r0
 80053a6:	4639      	mov	r1, r7
 80053a8:	4630      	mov	r0, r6
 80053aa:	f7ff fa67 	bl	800487c <_malloc_r>
 80053ae:	b948      	cbnz	r0, 80053c4 <__smakebuf_r+0x46>
 80053b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b4:	059a      	lsls	r2, r3, #22
 80053b6:	d4ee      	bmi.n	8005396 <__smakebuf_r+0x18>
 80053b8:	f023 0303 	bic.w	r3, r3, #3
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	e7e2      	b.n	800538a <__smakebuf_r+0xc>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	9b01      	ldr	r3, [sp, #4]
 80053d2:	6020      	str	r0, [r4, #0]
 80053d4:	b15b      	cbz	r3, 80053ee <__smakebuf_r+0x70>
 80053d6:	4630      	mov	r0, r6
 80053d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053dc:	f000 f838 	bl	8005450 <_isatty_r>
 80053e0:	b128      	cbz	r0, 80053ee <__smakebuf_r+0x70>
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	f023 0303 	bic.w	r3, r3, #3
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	81a3      	strh	r3, [r4, #12]
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	431d      	orrs	r5, r3
 80053f2:	81a5      	strh	r5, [r4, #12]
 80053f4:	e7cf      	b.n	8005396 <__smakebuf_r+0x18>

080053f6 <memmove>:
 80053f6:	4288      	cmp	r0, r1
 80053f8:	b510      	push	{r4, lr}
 80053fa:	eb01 0402 	add.w	r4, r1, r2
 80053fe:	d902      	bls.n	8005406 <memmove+0x10>
 8005400:	4284      	cmp	r4, r0
 8005402:	4623      	mov	r3, r4
 8005404:	d807      	bhi.n	8005416 <memmove+0x20>
 8005406:	1e43      	subs	r3, r0, #1
 8005408:	42a1      	cmp	r1, r4
 800540a:	d008      	beq.n	800541e <memmove+0x28>
 800540c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005410:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005414:	e7f8      	b.n	8005408 <memmove+0x12>
 8005416:	4601      	mov	r1, r0
 8005418:	4402      	add	r2, r0
 800541a:	428a      	cmp	r2, r1
 800541c:	d100      	bne.n	8005420 <memmove+0x2a>
 800541e:	bd10      	pop	{r4, pc}
 8005420:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005424:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005428:	e7f7      	b.n	800541a <memmove+0x24>
	...

0800542c <_fstat_r>:
 800542c:	b538      	push	{r3, r4, r5, lr}
 800542e:	2300      	movs	r3, #0
 8005430:	4d06      	ldr	r5, [pc, #24]	@ (800544c <_fstat_r+0x20>)
 8005432:	4604      	mov	r4, r0
 8005434:	4608      	mov	r0, r1
 8005436:	4611      	mov	r1, r2
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	f7fb fbdd 	bl	8000bf8 <_fstat>
 800543e:	1c43      	adds	r3, r0, #1
 8005440:	d102      	bne.n	8005448 <_fstat_r+0x1c>
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	b103      	cbz	r3, 8005448 <_fstat_r+0x1c>
 8005446:	6023      	str	r3, [r4, #0]
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	bf00      	nop
 800544c:	200002bc 	.word	0x200002bc

08005450 <_isatty_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	2300      	movs	r3, #0
 8005454:	4d05      	ldr	r5, [pc, #20]	@ (800546c <_isatty_r+0x1c>)
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fb fbdb 	bl	8000c16 <_isatty>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_isatty_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_isatty_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	200002bc 	.word	0x200002bc

08005470 <_sbrk_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	2300      	movs	r3, #0
 8005474:	4d05      	ldr	r5, [pc, #20]	@ (800548c <_sbrk_r+0x1c>)
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fb fbe2 	bl	8000c44 <_sbrk>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_sbrk_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_sbrk_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	200002bc 	.word	0x200002bc

08005490 <memchr>:
 8005490:	4603      	mov	r3, r0
 8005492:	b510      	push	{r4, lr}
 8005494:	b2c9      	uxtb	r1, r1
 8005496:	4402      	add	r2, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	4618      	mov	r0, r3
 800549c:	d101      	bne.n	80054a2 <memchr+0x12>
 800549e:	2000      	movs	r0, #0
 80054a0:	e003      	b.n	80054aa <memchr+0x1a>
 80054a2:	7804      	ldrb	r4, [r0, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	428c      	cmp	r4, r1
 80054a8:	d1f6      	bne.n	8005498 <memchr+0x8>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <memcpy>:
 80054ac:	440a      	add	r2, r1
 80054ae:	4291      	cmp	r1, r2
 80054b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054b4:	d100      	bne.n	80054b8 <memcpy+0xc>
 80054b6:	4770      	bx	lr
 80054b8:	b510      	push	{r4, lr}
 80054ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054be:	4291      	cmp	r1, r2
 80054c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c4:	d1f9      	bne.n	80054ba <memcpy+0xe>
 80054c6:	bd10      	pop	{r4, pc}

080054c8 <_realloc_r>:
 80054c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054cc:	4607      	mov	r7, r0
 80054ce:	4614      	mov	r4, r2
 80054d0:	460d      	mov	r5, r1
 80054d2:	b921      	cbnz	r1, 80054de <_realloc_r+0x16>
 80054d4:	4611      	mov	r1, r2
 80054d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054da:	f7ff b9cf 	b.w	800487c <_malloc_r>
 80054de:	b92a      	cbnz	r2, 80054ec <_realloc_r+0x24>
 80054e0:	f7ff f962 	bl	80047a8 <_free_r>
 80054e4:	4625      	mov	r5, r4
 80054e6:	4628      	mov	r0, r5
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ec:	f000 f81a 	bl	8005524 <_malloc_usable_size_r>
 80054f0:	4284      	cmp	r4, r0
 80054f2:	4606      	mov	r6, r0
 80054f4:	d802      	bhi.n	80054fc <_realloc_r+0x34>
 80054f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054fa:	d8f4      	bhi.n	80054e6 <_realloc_r+0x1e>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4638      	mov	r0, r7
 8005500:	f7ff f9bc 	bl	800487c <_malloc_r>
 8005504:	4680      	mov	r8, r0
 8005506:	b908      	cbnz	r0, 800550c <_realloc_r+0x44>
 8005508:	4645      	mov	r5, r8
 800550a:	e7ec      	b.n	80054e6 <_realloc_r+0x1e>
 800550c:	42b4      	cmp	r4, r6
 800550e:	4622      	mov	r2, r4
 8005510:	4629      	mov	r1, r5
 8005512:	bf28      	it	cs
 8005514:	4632      	movcs	r2, r6
 8005516:	f7ff ffc9 	bl	80054ac <memcpy>
 800551a:	4629      	mov	r1, r5
 800551c:	4638      	mov	r0, r7
 800551e:	f7ff f943 	bl	80047a8 <_free_r>
 8005522:	e7f1      	b.n	8005508 <_realloc_r+0x40>

08005524 <_malloc_usable_size_r>:
 8005524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005528:	1f18      	subs	r0, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	bfbc      	itt	lt
 800552e:	580b      	ldrlt	r3, [r1, r0]
 8005530:	18c0      	addlt	r0, r0, r3
 8005532:	4770      	bx	lr

08005534 <_init>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr

08005540 <_fini>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	bf00      	nop
 8005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005546:	bc08      	pop	{r3}
 8005548:	469e      	mov	lr, r3
 800554a:	4770      	bx	lr
